{"package":"@hongminhee/aitertools","version":"0.6.0","index":{"Range":{"id":"namespace_Range","kind":[{"char":"c","kind":"Class","title":"Class"},{"char":"c","kind":"Class","title":"Class"}],"name":"Range","file":".","doc":"An immutable sequence of numbers.  It implements both Iterable and AsyncIterable.It is similar to Python's range() function.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range","deprecated":false,"label":"Range"},"new Range":{"id":"namespace_Range","kind":[{"char":"c","kind":"Class","title":"Class"},{"char":"c","kind":"Class","title":"Class"}],"name":"Range","file":".","doc":"An immutable sequence of numbers.  It implements both Iterable and AsyncIterable.It is similar to Python's range() function.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range#constructors","deprecated":false,"label":"new Range"},"new Range()":{"id":"namespace_Range","kind":[{"char":"c","kind":"Class","title":"Class"},{"char":"c","kind":"Class","title":"Class"}],"name":"Range","file":".","doc":"An immutable sequence of numbers.  It implements both Iterable and AsyncIterable.It is similar to Python's range() function.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range#constructors","deprecated":false,"label":"new Range"},"Range.length()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.length","file":".","doc":"The length of the range.  Note that it guarantees to return the same value as Array.from(range).length.The above example will print 6.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.length","deprecated":false,"label":"Range.length()"},"~Range.length()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.length","file":".","doc":"The length of the range.  Note that it guarantees to return the same value as Array.from(range).length.The above example will print 6.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.length","deprecated":false,"label":"length()"},"Range.length":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.length","file":".","doc":"The length of the range.  Note that it guarantees to return the same value as Array.from(range).length.The above example will print 6.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.length","deprecated":false,"label":"Range.length"},"~Range.length":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.length","file":".","doc":"The length of the range.  Note that it guarantees to return the same value as Array.from(range).length.The above example will print 6.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.length","deprecated":false,"label":"length"},"Range.[Symbol.iterator]()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.[Symbol.iterator]","file":".","doc":"Iterates over the elements of the range.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.iterator]","deprecated":false,"label":"Range.[Symbol.iterator]()"},"~Range.[Symbol.iterator]()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.[Symbol.iterator]","file":".","doc":"Iterates over the elements of the range.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.iterator]","deprecated":false,"label":"[Symbol.iterator]()"},"Range.[Symbol.iterator]":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.[Symbol.iterator]","file":".","doc":"Iterates over the elements of the range.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.iterator]","deprecated":false,"label":"Range.[Symbol.iterator]"},"~Range.[Symbol.iterator]":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.[Symbol.iterator]","file":".","doc":"Iterates over the elements of the range.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.iterator]","deprecated":false,"label":"[Symbol.iterator]"},"Range.[Symbol.asyncIterator]()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.[Symbol.asyncIterator]","file":".","doc":"Iterates over the elements of the range, in an asynchronous manner.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.asyncIterator]","deprecated":false,"label":"Range.[Symbol.asyncIterator]()"},"~Range.[Symbol.asyncIterator]()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.[Symbol.asyncIterator]","file":".","doc":"Iterates over the elements of the range, in an asynchronous manner.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.asyncIterator]","deprecated":false,"label":"[Symbol.asyncIterator]()"},"Range.[Symbol.asyncIterator]":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.[Symbol.asyncIterator]","file":".","doc":"Iterates over the elements of the range, in an asynchronous manner.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.asyncIterator]","deprecated":false,"label":"Range.[Symbol.asyncIterator]"},"~Range.[Symbol.asyncIterator]":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.[Symbol.asyncIterator]","file":".","doc":"Iterates over the elements of the range, in an asynchronous manner.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.asyncIterator]","deprecated":false,"label":"[Symbol.asyncIterator]"},"Range.at()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.at","file":".","doc":"Returns the element at the specified index in the range.  Note that it guarantees to return the same value as Array.from(range).at(index).The above example will print the following 2 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.at","deprecated":false,"label":"Range.at()"},"~Range.at()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.at","file":".","doc":"Returns the element at the specified index in the range.  Note that it guarantees to return the same value as Array.from(range).at(index).The above example will print the following 2 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.at","deprecated":false,"label":"at()"},"Range.at":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.at","file":".","doc":"Returns the element at the specified index in the range.  Note that it guarantees to return the same value as Array.from(range).at(index).The above example will print the following 2 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.at","deprecated":false,"label":"Range.at"},"~Range.at":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.at","file":".","doc":"Returns the element at the specified index in the range.  Note that it guarantees to return the same value as Array.from(range).at(index).The above example will print the following 2 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.at","deprecated":false,"label":"at"},"Range.toString()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.toString","file":".","doc":"Represents the range as a string.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.toString","deprecated":false,"label":"Range.toString()"},"~Range.toString()":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.toString","file":".","doc":"Represents the range as a string.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.toString","deprecated":false,"label":"toString()"},"Range.toString":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.toString","file":".","doc":"Represents the range as a string.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.toString","deprecated":false,"label":"Range.toString"},"~Range.toString":{"id":"namespace_Range","kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Range.prototype.toString","file":".","doc":"Represents the range as a string.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.toString","deprecated":false,"label":"toString"},"Range.start":{"id":"namespace_Range","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Range.prototype.start","file":".","doc":"The start of the range.  It must be a finite number.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.start","deprecated":false,"label":"Range.start"},"~Range.start":{"id":"namespace_Range","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Range.prototype.start","file":".","doc":"The start of the range.  It must be a finite number.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.start","deprecated":false,"label":"start"},"Range.stop":{"id":"namespace_Range","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Range.prototype.stop","file":".","doc":"The stop of the range.  It must be a finite number.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.stop","deprecated":false,"label":"Range.stop"},"~Range.stop":{"id":"namespace_Range","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Range.prototype.stop","file":".","doc":"The stop of the range.  It must be a finite number.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.stop","deprecated":false,"label":"stop"},"Range.step":{"id":"namespace_Range","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Range.prototype.step","file":".","doc":"The step of the range.  It must be a finite number, and cannot be zero.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.step","deprecated":false,"label":"Range.step"},"~Range.step":{"id":"namespace_Range","kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Range.prototype.step","file":".","doc":"The step of the range.  It must be a finite number, and cannot be zero.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.step","deprecated":false,"label":"step"},"assertStreamStartsWith()":{"id":"namespace_assertStreamStartsWith","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"assertStreamStartsWith","file":".","doc":"Makes an assertion that the beginning elements of the actual iterable are in common with the elements of the expected array.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/assertStreamStartsWith","deprecated":false,"label":"assertStreamStartsWith()"},"assertStreams()":{"id":"namespace_assertStreams","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"assertStreams","file":".","doc":"Makes an assertion that the elements of the actual iterable are equal to the elements of the expected array.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/assertStreams","deprecated":false,"label":"assertStreams()"},"concat()":{"id":"namespace_concat","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"concat","file":".","doc":"Concatenates multiple async iterables into one async iterable.The above example will print the following 8 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/concat","deprecated":false,"label":"concat()"},"count()":{"id":"namespace_count","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"count","file":".","doc":"Makes an infinite async iterable of evenly spaced values starting with the start number.The above example will print the following and keep going forever:You could adjust the interval by passing a second argument to count():The above example will print the following and keep going forever:As it's infinite, it's usually used with break to stop the iteration:Or with other async generators like takeWhile():The both examples above will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/count","deprecated":false,"label":"count()"},"cycle()":{"id":"namespace_cycle","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"cycle","file":".","doc":"Makes an async iterator that yields elements from the source and saving a copy of each.  When the source is exhausted, yields saved copies indefinitely.Note that it may require significant memory to save the copies depending on the length of the source.The above example will print the following and keep going forever:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/cycle","deprecated":false,"label":"cycle()"},"drop()":{"id":"namespace_drop","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"drop","file":".","doc":"Drops a specified number of elements from the beginning of an async iterable, and yields the remaining elements.The above example will print the following 2 lines:If the iterable is shorter than or equal to the specified number, no elements are yielded.The above example will print nothing.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/drop","deprecated":false,"label":"drop()"},"dropEnd()":{"id":"namespace_dropEnd","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"dropEnd","file":".","doc":"Drops a specified number of elements from the end of an async iterable, and yields the remaining elements.The above example will print the following 2 lines:If the iterable is shorter than or equal to the specified number, no elements are yielded.The above example will print nothing.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/dropEnd","deprecated":false,"label":"dropEnd()"},"dropWhile()":{"id":"namespace_dropWhile","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"dropWhile","file":".","doc":"Drops elements from the beginning of an async iterable as long as a specified condition is met, and yields the remaining elements.The above example will print the following 2 lines:An async predicate function also works.  The following example will print the same 2 lines as the previous example:A predicate function can take an index as well as the value.The above example will print the following 3 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/dropWhile","deprecated":false,"label":"dropWhile()"},"filter()":{"id":"namespace_filter","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"filter","file":".","doc":"Eliminates all elements from the iterable source that do not satisfy the predicate function.The above example will print the following 2 lines:The predicate function can take an index as well as the value.The above example will print the following 2 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/filter","deprecated":false,"label":"filter()"},"fromIterable()":{"id":"namespace_fromIterable","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"fromIterable","file":".","doc":"Turns a synchrnous iterable source into an async iterable.The above example will print the following lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/fromIterable","deprecated":false,"label":"fromIterable()"},"groupBy()":{"id":"namespace_groupBy","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"groupBy","file":".","doc":"Groups elmenets of an async interable source according to a specified keySelector function and creates a map of each group key to the elements in that group.  Key values are compared using the === operator.The above example will print the following:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/groupBy","deprecated":false,"label":"groupBy()"},"map()":{"id":"namespace_map","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"map","file":".","doc":"Transforms every element of the iterable source into a new iterable.The above example will print the following and keep going forever:The fn function can take an additional argument, which is the index of the element in the iterable.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/map","deprecated":false,"label":"map()"},"range()":{"id":"namespace_range","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"range","file":".","doc":"Creates a Range of numbers from 0 to stop with step 1.The above example will print the following 4 lines:Note that the type of the range is Range<number>, which implements both Iterable<number> and AsyncIterable<number>.","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/range","deprecated":false,"label":"range()"},"reduce()":{"id":"namespace_reduce","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"reduce","file":".","doc":"Apply reducer function of two arguments cumulatively to the elements of an async iterable source, from left to right, so as to reduce the async iterable to a single value.The above example will print the following:If the async iterable source is empty, the reducer function is not called and initialValue is returned.The above example will print the following:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/reduce","deprecated":false,"label":"reduce()"},"repeat()":{"id":"namespace_repeat","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"repeat","file":".","doc":"Makes an async iterator that yields the same value over and over again. It will repeat indefinitely unless times is specified.The above example will print the following and keep going forever:However, if you specify the second parameter times it will repeat that many times:The above example will print the following 3 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/repeat","deprecated":false,"label":"repeat()"},"take()":{"id":"namespace_take","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"take","file":".","doc":"Takes a specified number of elements from the beginning of an async iterable.The above example will print the following 3 lines:If the iterable is shorter than the specified number, the whole elements are taken.The above example will print only 3 elements, because gen() yields only 3 elements:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/take","deprecated":false,"label":"take()"},"takeEnd()":{"id":"namespace_takeEnd","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"takeEnd","file":".","doc":"Takes a specified number of elements from the end of an async iterable.The above example will print the following 3 lines:If the iterable is shorter than the specified number, the whole elements are taken.The above example will print only 3 elements, because gen() yields only 3 elements:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/takeEnd","deprecated":false,"label":"takeEnd()"},"takeWhile()":{"id":"namespace_takeWhile","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"takeWhile","file":".","doc":"Takes elements from the beginning of an async iterable as long as a specified condition is met.  If the condition is not met, the iterable stops.The above example will print the following 4 lines:An async predicate function also works.  The following example will print the same 4 lines as the previous example:A predicate function can take an index as well as the value.The above example will print the following 4 lines:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/takeWhile","deprecated":false,"label":"takeWhile()"},"tee()":{"id":"namespace_tee","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"tee","file":".","doc":"","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/tee","deprecated":false,"label":"tee()"},"toArray()":{"id":"namespace_toArray","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"toArray","file":".","doc":"Creates an array from an async iterable.The array variable will be an array like [\"foo\", \"bar\", \"baz\"].Note that its first parameter is assumed to be finite; otherwise, it will never return.  The following example will never return:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/toArray","deprecated":false,"label":"toArray()"},"toMap()":{"id":"namespace_toMap","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"toMap","file":".","doc":"Creates a map from an async iterable of key-value pairs.  Each pair is represented as an array of two elements.The map variable will be a map like Map { \"foo\" => 1, \"bar\" => 2, \"baz\" => 3, \"qux\" => 4 }.Duplicate keys are removed except for the last occurrence of each key.  E.g.:The map variable will be a map like Map { \"foo\" => 5, \"bar\" => 6, \"baz\" => 3, \"qux\" => 4 }.Note that the iterable source is assumed to be finite; otherwise, it will never return.  The following example will never return:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/toMap","deprecated":false,"label":"toMap()"},"toSet()":{"id":"namespace_toSet","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"toSet","file":".","doc":"Creates a set from an async iterable.The set variable will be a set like new Set([\"foo\", \"bar\", \"baz\"]).Duplicate elements are removed except for the first occurrence of each element.  E.g.:The set variable will be a set like new Set([\"foo\", \"bar\"]).Note that the iterable source is assumed to be finite; otherwise, it will never return.  The following example will never return:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/toSet","deprecated":false,"label":"toSet()"},"unique()":{"id":"namespace_unique","kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"unique","file":".","doc":"Eliminate duplicates in an async iterable source.The above example will print the following 2 lines:For complex elements, the keySelector function can be used to specify how to compare the elements.   Among duplicate elements, the one with the first occurrence of the key is kept.  E.g.:The above example will print the following:","url":"https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/unique","deprecated":false,"label":"unique()"}}}