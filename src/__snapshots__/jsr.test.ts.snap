export const snapshot = {};

snapshot[`fetchRootSymbols() 1`] = `
[
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` accepts the \`object\`.  The \`target\` property can be
used in certain circumstances to indicate the context into which the \`object\`
has been accepted.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 189890,
      col: 0,
      filename: "",
      line: 5921,
    },
    name: "Accept",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Accept",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "An Activity is a subtype of {@link Object} that describes some form of action
that may happen, is currently happening, or has already happened.
The {@link Activity} type itself serves as an abstract base type for all types
of activities.  It is important to note that the {@link Activity} type itself
does not carry any specific semantics about the kind of action being taken.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 164668,
      col: 0,
      filename: "",
      line: 5096,
    },
    name: "Activity",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Activity",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Actor types are {@link Object} types that are capable of performing
activities.",
    file: ".",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 233,
      col: 0,
      filename: "",
      line: 8,
    },
    name: "Actor",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Actor",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A string representation of an actor type name.",
    file: ".",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 771,
      col: 0,
      filename: "",
      line: 28,
    },
    name: "ActorTypeName",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/ActorTypeName",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` has added the \`object\` to the \`target\`.
If the \`target\` property is not explicitly specified, the target would need
to be determined implicitly by context.  The \`origin\` can be used to identify
the context from which the \`object\` originated.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 198311,
      col: 0,
      filename: "",
      line: 6183,
    },
    name: "Add",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Add",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` is calling the \`target\`'s attention the \`object\`.

The \`origin\` typically has no defined meaning.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 206533,
      col: 0,
      filename: "",
      line: 6442,
    },
    name: "Announce",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Announce",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Describes a software application.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 214730,
      col: 0,
      filename: "",
      line: 6701,
    },
    name: "Application",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Application",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents any kind of multi-paragraph written work.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 265549,
      col: 0,
      filename: "",
      line: 8212,
    },
    name: "Article",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Article",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents an audio document of any kind.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 281568,
      col: 0,
      filename: "",
      line: 8714,
    },
    name: "Audio",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Audio",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A factory function that creates an authenticated {@link DocumentLoader} for
a given identity.  This is used for fetching documents that require
authentication.",
    file: ".",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 1002,
      col: 0,
      filename: "",
      line: 32,
    },
    name: "AuthenticatedDocumentLoaderFactory",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/AuthenticatedDocumentLoaderFactory",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` is blocking the \`object\`.  Blocking is a stronger
form of {@link Ignore}.  The typical use is to support social systems that
allow one user to block activities or content of other users.  The \`target\`
and \`origin\` typically have no defined meaning.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 297844,
      col: 0,
      filename: "",
      line: 9219,
    },
    name: "Block",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Block",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A \`Collection\` is a subtype of {@link Object} that represents ordered or
unordered sets of {@link Object} or {@link Link} instances.

Refer to the Activity Streams 2.0 Core specification for a complete
description of the Collection type.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 306203,
      col: 0,
      filename: "",
      line: 9480,
    },
    name: "Collection",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Collection",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Used to represent distinct subsets of items from a \`Collection\`.
Refer to the Activity Streams 2.0 Core for a complete description of
the \`CollectionPage\` object.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 337583,
      col: 0,
      filename: "",
      line: 10432,
    },
    name: "CollectionPage",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/CollectionPage",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` has created the \`object\`.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 360256,
      col: 0,
      filename: "",
      line: 11133,
    },
    name: "Create",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Create",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A key owned by an actor.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 9190,
      col: 0,
      filename: "",
      line: 277,
    },
    name: "CryptographicKey",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/CryptographicKey",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` has deleted the \`object\`.  If specified,
the \`origin\` indicates the context from which the \`object\` was deleted.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 368542,
      col: 0,
      filename: "",
      line: 11393,
    },
    name: "Delete",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Delete",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` dislikes the \`object\`.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 376735,
      col: 0,
      filename: "",
      line: 11652,
    },
    name: "Dislike",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Dislike",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents a document of any kind.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 273155,
      col: 0,
      filename: "",
      line: 8449,
    },
    name: "Document",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Document",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A JSON-LD document loader that fetches documents from the Web.",
    file: ".",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 582,
      col: 0,
      filename: "",
      line: 21,
    },
    name: "DocumentLoader",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/DocumentLoader",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Contents of {@link Actor}'s \`endpoints\`.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 384929,
      col: 0,
      filename: "",
      line: 11911,
    },
    name: "Endpoints",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Endpoints",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents any kind of event.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 400437,
      col: 0,
      filename: "",
      line: 12354,
    },
    name: "Event",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Event",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Error thrown when fetching a JSON-LD document failed.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 1191,
      col: 0,
      filename: "",
      line: 39,
    },
    name: "FetchError",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/FetchError",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Indicates that the \`actor\` is "flagging" the \`object\`.  Flagging is defined
in the sense common to many social platforms as reporting content as being
inappropriate for any number of reasons.',
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 408165,
      col: 0,
      filename: "",
      line: 12591,
    },
    name: "Flag",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Flag",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Indicates that the \`actor\` is "following" the \`object\`.  Following is defined
in the sense typically used within Social systems in which the actor is
interested in any activity performed by or on the object.  The \`target\` and
\`origin\` typically have no defined meaning.',
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 416546,
      col: 0,
      filename: "",
      line: 12851,
    },
    name: "Follow",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Follow",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents a formal or informal collective of Actors.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 424743,
      col: 0,
      filename: "",
      line: 13110,
    },
    name: "Group",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Group",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` is ignoring the \`object\`.  The \`target\` and
\`origin\` typically have no defined meaning.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 289218,
      col: 0,
      filename: "",
      line: 8950,
    },
    name: "Ignore",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Ignore",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "An image document of any kind.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 475411,
      col: 0,
      filename: "",
      line: 14619,
    },
    name: "Image",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Image",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "The third party sites this server can retrieve messages from for combined
display with regular traffic.",
    file: ".",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 2285,
      col: 0,
      filename: "",
      line: 114,
    },
    name: "InboundService",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/InboundService",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Instances of \`IntransitiveActivity\` are a subtype of {@link Activity}
representing intransitive actions.  The \`object\` property is therefore
inappropriate for these activities.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 483126,
      col: 0,
      filename: "",
      line: 14856,
    },
    name: "IntransitiveActivity",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/IntransitiveActivity",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "The type of the result of parsing JSON.",
    file: ".",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 116,
      col: 0,
      filename: "",
      line: 6,
    },
    name: "JsonValue",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/JsonValue",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "The parameters for {@link kvCache} function.",
    file: ".",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 3459,
      col: 0,
      filename: "",
      line: 122,
    },
    name: "KvCacheParameters",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/KvCacheParameters",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A language-tagged string which corresponds to the \`rdf:langString\` type.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 173,
      col: 0,
      filename: "",
      line: 6,
    },
    name: "LanguageString",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/LanguageString",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` likes, recommends or endorses the \`object\`.
The \`target\` and \`origin\` typically have no defined meaning.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 491576,
      col: 0,
      filename: "",
      line: 15121,
    },
    name: "Like",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Like",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A Link is an indirect, qualified reference to a resource identified by a URL.
The fundamental model for links is established by RFC 5988. Many of the
properties defined by the Activity Vocabulary allow values that are either
instances of {@link Object} or {@link Link}. When a {@link Link} is used,
it establishes a qualified relation connecting the subject (the containing
object) to the resource identified by the \`href\`. Properties of
the {@link Link} are properties of the reference as opposed to properties of
the resource.",
    file: ".",
    kind: [
      "class",
      "class",
      "interface",
    ],
    location: {
      byteIndex: 500228,
      col: 0,
      filename: "",
      line: 15385,
    },
    name: "Link",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Link",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Options for the \`lookupObject\` function.
",
    file: ".",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 256,
      col: 0,
      filename: "",
      line: 13,
    },
    name: "LookupObjectOptions",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/LookupObjectOptions",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A specialized {@link Link} that represents an @mention.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 525824,
      col: 0,
      filename: "",
      line: 16149,
    },
    name: "Mention",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Mention",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A NodeInfo object as defined in the NodeInfo 2.1 schema.",
    file: ".",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 314,
      col: 0,
      filename: "",
      line: 17,
    },
    name: "NodeInfo",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/NodeInfo",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents a short written work typically less than a single paragraph in
length.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 530536,
      col: 0,
      filename: "",
      line: 16307,
    },
    name: "Note",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Note",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Describes an object of any kind. The Object type serves as the base type for
most of the other kinds of objects defined in the Activity Vocabulary,
including other Core types such as {@link Activity},
{@link IntransitiveActivity}, {@link Collection} and
{@link OrderedCollection}.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 21803,
      col: 0,
      filename: "",
      line: 675,
    },
    name: "Object",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Object",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A subtype of {@link Collection} in which members of the logical collection
are assumed to always be strictly ordered.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 538177,
      col: 0,
      filename: "",
      line: 16543,
    },
    name: "OrderedCollection",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/OrderedCollection",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Used to represent ordered subsets of items from an \`OrderedCollection\`.
Refer to the Activity Streams 2.0 Core for a complete description of
the \`OrderedCollectionPage\` object.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 546496,
      col: 0,
      filename: "",
      line: 16794,
    },
    name: "OrderedCollectionPage",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/OrderedCollectionPage",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents an organization.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 556647,
      col: 0,
      filename: "",
      line: 17100,
    },
    name: "Organization",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Organization",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "The third party sites this server can publish messages to on the behalf
of a user.",
    file: ".",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 2555,
      col: 0,
      filename: "",
      line: 129,
    },
    name: "OutboundService",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/OutboundService",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents a Web Page.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 607454,
      col: 0,
      filename: "",
      line: 18611,
    },
    name: "Page",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Page",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents an individual person.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 615009,
      col: 0,
      filename: "",
      line: 18846,
    },
    name: "Person",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Person",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents a logical or physical location.  See [5.3 Representing
Places](https://www.w3.org/TR/activitystreams-vocabulary/#places)
for additional information.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 665851,
      col: 0,
      filename: "",
      line: 20359,
    },
    name: "Place",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Place",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A {@link Profile} is a content object that describes another {@link Object},
typically used to describe [Actor
Type](https://www.w3.org/TR/activitystreams-vocabulary/#actor-types) objects.
The {@link Profile.describes} property is used to reference the object being
described by the profile.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 683998,
      col: 0,
      filename: "",
      line: 20885,
    },
    name: "Profile",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Profile",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A pair of property name and value.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 502,
      col: 0,
      filename: "",
      line: 15,
    },
    name: "PropertyValue",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/PropertyValue",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "The protocols supported on this server.",
    file: ".",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 1555,
      col: 0,
      filename: "",
      line: 80,
    },
    name: "Protocol",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Protocol",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` is rejecting the \`object\`.  The \`target\` and
\`origin\` typically have no defined meaning.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 695307,
      col: 0,
      filename: "",
      line: 21237,
    },
    name: "Reject",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Reject",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Describes a relationship between two individuals.
The {@link Relationship.subject} and {@link Relationship.object} properties
are used to identify the connected individuals.

See [5.2 Representing Relationships Between
Entities](https://www.w3.org/TR/activitystreams-vocabulary/#connections)
for additional information.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 703787,
      col: 0,
      filename: "",
      line: 21502,
    },
    name: "Relationship",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Relationship",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A remote JSON-LD document and its context fetched by
a {@link DocumentLoader}.",
    file: ".",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 311,
      col: 0,
      filename: "",
      line: 10,
    },
    name: "RemoteDocument",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/RemoteDocument",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` is removing the \`object\`.  If specified,
the \`origin\` indicates the context from which the \`object\` is being removed.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 726416,
      col: 0,
      filename: "",
      line: 22227,
    },
    name: "Remove",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Remove",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Describes a resource.  See also
[RFC 7033 section 4.4](https://datatracker.ietf.org/doc/html/rfc7033#section-4.4).",
    file: ".",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 129,
      col: 0,
      filename: "",
      line: 5,
    },
    name: "ResourceDescriptor",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/ResourceDescriptor",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents a service of any kind.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 734593,
      col: 0,
      filename: "",
      line: 22486,
    },
    name: "Service",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Service",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "The third party sites this server can connect to via their application API.",
    file: ".",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 1842,
      col: 0,
      filename: "",
      line: 96,
    },
    name: "Services",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Services",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Metadata about server software in use.",
    file: ".",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 1082,
      col: 0,
      filename: "",
      line: 54,
    },
    name: "Software",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Software",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Indicates that the \`actor\` is undoing the \`object\`.  In most cases,
the \`object\` will be an {@link Activity} describing some previously performed
action (for instance, a person may have previously "liked" an article but,
for whatever reason, might choose to undo that like at some later point in
time).

The \`target\` and \`origin\` typically have no defined meaning.',
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 785669,
      col: 0,
      filename: "",
      line: 24003,
    },
    name: "Undo",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Undo",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Indicates that the \`actor\` has updated the \`object\`.  Note, however,
that this vocabulary does not define a mechanism for describing the actual
set of modifications made to \`object\`.

The \`target\` and \`origin\` typically have no defined meaning.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 794027,
      col: 0,
      filename: "",
      line: 24264,
    },
    name: "Update",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Update",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Usage statistics for this server.",
    file: ".",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 3083,
      col: 0,
      filename: "",
      line: 163,
    },
    name: "Usage",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Usage",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents a video document of any kind.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 802211,
      col: 0,
      filename: "",
      line: 24523,
    },
    name: "Video",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/Video",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Exports a public key in PEM-SPKI format.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 769,
      col: 0,
      filename: "",
      line: 28,
    },
    name: "exportSpki",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/exportSpki",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A JSON-LD document loader that utilizes the browser's \`fetch\` API.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 2382,
      col: 0,
      filename: "",
      line: 90,
    },
    name: "fetchDocumentLoader",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/fetchDocumentLoader",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Gets the actor class by the given type name.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1588,
      col: 0,
      filename: "",
      line: 56,
    },
    name: "getActorClassByTypeName",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/getActorClassByTypeName",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Gets the actor handle, of the form \`@username@domain\`, from the given actor
or an actor URI.
",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 2778,
      col: 0,
      filename: "",
      line: 101,
    },
    name: "getActorHandle",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/getActorHandle",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Gets the type name of the given actor.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1024,
      col: 0,
      filename: "",
      line: 40,
    },
    name: "getActorTypeName",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/getActorTypeName",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Gets an authenticated {@link DocumentLoader} for the given identity.
Note that an authenticated document loader intentionally does not cache
the fetched documents.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 2977,
      col: 0,
      filename: "",
      line: 107,
    },
    name: "getAuthenticatedDocumentLoader",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/getAuthenticatedDocumentLoader",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Imports a PEM-SPKI formatted public key.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 235,
      col: 0,
      filename: "",
      line: 9,
    },
    name: "importSpki",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/importSpki",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Checks if the given object is an {@link Actor}.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 466,
      col: 0,
      filename: "",
      line: 15,
    },
    name: "isActor",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/isActor",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Decorates a {@link DocumentLoader} with a cache backed by a {@link Deno.Kv}.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 4532,
      col: 0,
      filename: "",
      line: 159,
    },
    name: "kvCache",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/kvCache",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Looks up an ActivityStreams object by its URI (including \`acct:\` URIs)
or a fediverse handle (e.g., \`@user@server\` or \`user@server\`).
",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1472,
      col: 0,
      filename: "",
      line: 52,
    },
    name: "lookupObject",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/lookupObject",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Looks up a WebFinger resource.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 220,
      col: 0,
      filename: "",
      line: 9,
    },
    name: "lookupWebFinger",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/lookupWebFinger",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Converts a {@link NodeInfo} object to a JSON value.",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 4382,
      col: 0,
      filename: "",
      line: 206,
    },
    name: "nodeInfoToJson",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/~/nodeInfoToJson",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Additional settings for the actor dispatcher.

\`\`\` typescript
const federation = new Federation<void>({ ... });
federation.setActorDispatcher("/users/{handle}", async (ctx, handle, key) => {
  ...
})
  .setKeyPairDispatcher(async (ctxData, handle) => {
    ...
  });
\`\`\`',
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 29458,
      col: 0,
      filename: "",
      line: 893,
    },
    name: "ActorCallbackSetters",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/ActorCallbackSetters",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A callback that dispatches an {@link Actor} object.
",
    file: "federation",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 684,
      col: 0,
      filename: "",
      line: 21,
    },
    name: "ActorDispatcher",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/ActorDispatcher",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A callback that dispatches a key pair for an actor.
",
    file: "federation",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 1007,
      col: 0,
      filename: "",
      line: 32,
    },
    name: "ActorKeyPairDispatcher",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/ActorKeyPairDispatcher",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Additional settings for a collection dispatcher.",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 29892,
      col: 0,
      filename: "",
      line: 907,
    },
    name: "CollectionCallbackSetters",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/CollectionCallbackSetters",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A callback that counts the number of items in a collection.
",
    file: "federation",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 1656,
      col: 0,
      filename: "",
      line: 53,
    },
    name: "CollectionCounter",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/CollectionCounter",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A callback that returns a cursor for a collection.
",
    file: "federation",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 1968,
      col: 0,
      filename: "",
      line: 63,
    },
    name: "CollectionCursor",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/CollectionCursor",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A callback that dispatches a collection.
",
    file: "federation",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 1298,
      col: 0,
      filename: "",
      line: 42,
    },
    name: "CollectionDispatcher",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/CollectionDispatcher",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A context.",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 201,
      col: 0,
      filename: "",
      line: 8,
    },
    name: "Context",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/Context",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "An object that registers federation-related business logic and dispatches
requests to the appropriate handlers.

It also provides a middleware interface for handling requests before your
web framework's router; see {@link Federation.handle}.",
    file: "federation",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 3347,
      col: 0,
      filename: "",
      line: 114,
    },
    name: "Federation",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/Federation",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Parameters of {@link Federation.fetch} method.
",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 28256,
      col: 0,
      filename: "",
      line: 852,
    },
    name: "FederationFetchOptions",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/FederationFetchOptions",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Prefixes for namespacing keys in the Deno KV store.",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 2701,
      col: 0,
      filename: "",
      line: 93,
    },
    name: "FederationKvPrefixes",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/FederationKvPrefixes",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Parameters for initializing a {@link Federation} instance.",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 1288,
      col: 0,
      filename: "",
      line: 44,
    },
    name: "FederationParameters",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/FederationParameters",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A message queue that processes messages in the same process.
Do not use this in production as it does not persist messages.
",
    file: "federation",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 1032,
      col: 0,
      filename: "",
      line: 42,
    },
    name: "InProcessMessageQueue",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/InProcessMessageQueue",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A callback that handles errors in an inbox.
",
    file: "federation",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 2620,
      col: 0,
      filename: "",
      line: 84,
    },
    name: "InboxErrorHandler",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/InboxErrorHandler",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A callback that listens for activities in an inbox.
",
    file: "federation",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 2322,
      col: 0,
      filename: "",
      line: 74,
    },
    name: "InboxListener",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/InboxListener",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Registry for inbox listeners for different activity types.",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 30347,
      col: 0,
      filename: "",
      line: 924,
    },
    name: "InboxListenerSetter",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/InboxListenerSetter",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A key for a key-value store.  An array of one or more strings.
",
    file: "federation",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 155,
      col: 0,
      filename: "",
      line: 8,
    },
    name: "KvKey",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/KvKey",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "An abstract interface for a key-value store.
",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 516,
      col: 0,
      filename: "",
      line: 27,
    },
    name: "KvStore",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/KvStore",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Additional options for setting a value in a key-value store.
",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 319,
      col: 0,
      filename: "",
      line: 15,
    },
    name: "KvStoreSetOptions",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/KvStoreSetOptions",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A key-value store that stores values in memory.
Do not use this in production as it does not persist values.
",
    file: "federation",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 1370,
      col: 0,
      filename: "",
      line: 57,
    },
    name: "MemoryKvStore",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/MemoryKvStore",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "An abstract interface for a message queue.
",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 425,
      col: 0,
      filename: "",
      line: 21,
    },
    name: "MessageQueue",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/MessageQueue",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Additional options for enqueuing a message in a queue.
",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 193,
      col: 0,
      filename: "",
      line: 9,
    },
    name: "MessageQueueEnqueueOptions",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/MessageQueueEnqueueOptions",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A callback that dispatches a {@link NodeInfo} object.
",
    file: "federation",
    kind: [
      "typeAlias",
      "typeAlias",
    ],
    location: {
      byteIndex: 416,
      col: 0,
      filename: "",
      line: 12,
    },
    name: "NodeInfoDispatcher",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/NodeInfoDispatcher",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A page of items.",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 28,
      col: 0,
      filename: "",
      line: 4,
    },
    name: "PageItems",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/PageItems",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A context for a request.",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 4336,
      col: 0,
      filename: "",
      line: 134,
    },
    name: "RequestContext",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/RequestContext",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Options for the {@link respondWithObject} and
{@link respondWithObjectIfAcceptable} functions.",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 10849,
      col: 0,
      filename: "",
      line: 350,
    },
    name: "RespondWithObjectOptions",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/RespondWithObjectOptions",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "URL router and constructor based on URI Template
([RFC 6570](https://tools.ietf.org/html/rfc6570)).",
    file: "federation",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 281,
      col: 0,
      filename: "",
      line: 9,
    },
    name: "Router",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/Router",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "An error thrown by the {@link Router}.",
    file: "federation",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 2213,
      col: 0,
      filename: "",
      line: 77,
    },
    name: "RouterError",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/RouterError",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Options for {@link Context.sendActivity} method and
{@link Federation.sendActivity} method.",
    file: "federation",
    kind: [
      "interface",
      "interface",
    ],
    location: {
      byteIndex: 4652,
      col: 0,
      filename: "",
      line: 150,
    },
    name: "SendActivityOptions",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/SendActivityOptions",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Responds with the given object in JSON-LD format.
",
    file: "federation",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 11150,
      col: 0,
      filename: "",
      line: 364,
    },
    name: "respondWithObject",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/respondWithObject",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Responds with the given object in JSON-LD format if the request accepts
JSON-LD.
",
    file: "federation",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 11701,
      col: 0,
      filename: "",
      line: 385,
    },
    name: "respondWithObjectIfAcceptable",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/federation/~/respondWithObjectIfAcceptable",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Checks if the actor of the given activity owns the specified key.",
    file: "httpsig",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 7154,
      col: 0,
      filename: "httpsig",
      line: 212,
    },
    name: "doesActorOwnKey",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/httpsig/~/doesActorOwnKey",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Exports a key in JWK format.",
    file: "httpsig",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1825,
      col: 0,
      filename: "",
      line: 61,
    },
    name: "exportJwk",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/httpsig/~/exportJwk",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Generates a key pair which is appropriate for Fedify.",
    file: "httpsig",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1238,
      col: 0,
      filename: "",
      line: 40,
    },
    name: "generateCryptoKeyPair",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/httpsig/~/generateCryptoKeyPair",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Imports a key from JWK format.",
    file: "httpsig",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 2243,
      col: 0,
      filename: "",
      line: 74,
    },
    name: "importJwk",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/httpsig/~/importJwk",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Signs a request using the given private key.",
    file: "httpsig",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1014,
      col: 0,
      filename: "httpsig",
      line: 29,
    },
    name: "sign",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/httpsig/~/sign",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Verifies the signature of a request.

Note that this function consumes the request body, so it should not be used
if the request body is already consumed.  Consuming the request body after
calling this function is okay, since this function clones the request
under the hood.",
    file: "httpsig",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 3242,
      col: 0,
      filename: "httpsig",
      line: 94,
    },
    name: "verify",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/httpsig/~/verify",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents a message queue adapter that uses Deno KV store.",
    file: "x/denokv",
    kind: [
      "class",
    ],
    location: {
      byteIndex: 1677,
      col: 0,
      filename: "x/denokv",
      line: 69,
    },
    name: "DenoKvMessageQueue",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/denokv/~/DenoKvMessageQueue",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Represents a key-value store implementation using Deno's KV store.",
    file: "x/denokv",
    kind: [
      "class",
    ],
    location: {
      byteIndex: 691,
      col: 0,
      filename: "x/denokv",
      line: 22,
    },
    name: "DenoKvStore",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/denokv/~/DenoKvStore",
  },
  {
    category: "",
    declarationKind: "private",
    deprecated: false,
    doc: "",
    file: "x/fresh",
    kind: [
      "interface",
    ],
    location: {
      byteIndex: 320,
      col: 0,
      filename: "x/fresh",
      line: 18,
    },
    name: "FreshContext",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/fresh/~/FreshContext",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Create options for the \`federation\` object to integrate with Fresh.
",
    file: "x/fresh",
    kind: [
      "function",
    ],
    location: {
      byteIndex: 974,
      col: 0,
      filename: "x/fresh",
      line: 42,
    },
    name: "integrateFetchOptions",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/fresh/~/integrateFetchOptions",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Create a Fresh middleware handler to integrate with the {@link Federation}
object.
",
    file: "x/fresh",
    kind: [
      "function",
    ],
    location: {
      byteIndex: 3222,
      col: 0,
      filename: "x/fresh",
      line: 101,
    },
    name: "integrateHandler",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/fresh/~/integrateHandler",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: true,
    doc: "Create options for the \`federation\` object to integrate with Fresh.
",
    file: "x/fresh",
    kind: [
      "variable",
    ],
    location: {
      byteIndex: 2446,
      col: 13,
      filename: "x/fresh",
      line: 80,
    },
    name: "integrateHandlerOptions",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/fresh/~/integrateHandlerOptions",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "A factory function to create a context data for the {@link Federation}
object.
",
    file: "x/hono",
    kind: [
      "typeAlias",
    ],
    location: {
      byteIndex: 897,
      col: 0,
      filename: "x/hono",
      line: 41,
    },
    name: "ContextDataFactory",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/hono/~/ContextDataFactory",
  },
  {
    category: "",
    declarationKind: "private",
    deprecated: false,
    doc: "",
    file: "x/hono",
    kind: [
      "interface",
    ],
    location: {
      byteIndex: 323,
      col: 0,
      filename: "x/hono",
      line: 21,
    },
    name: "HonoContext",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/hono/~/HonoContext",
  },
  {
    category: "",
    declarationKind: "private",
    deprecated: false,
    doc: "",
    file: "x/hono",
    kind: [
      "typeAlias",
    ],
    location: {
      byteIndex: 387,
      col: 0,
      filename: "x/hono",
      line: 26,
    },
    name: "HonoMiddleware",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/hono/~/HonoMiddleware",
  },
  {
    category: "",
    declarationKind: "private",
    deprecated: false,
    doc: "",
    file: "x/hono",
    kind: [
      "interface",
    ],
    location: {
      byteIndex: 280,
      col: 0,
      filename: "x/hono",
      line: 17,
    },
    name: "HonoRequest",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/hono/~/HonoRequest",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Create a Hono middleware to integrate with the {@link Federation} object.
",
    file: "x/hono",
    kind: [
      "function",
    ],
    location: {
      byteIndex: 1521,
      col: 0,
      filename: "x/hono",
      line: 56,
    },
    name: "federation",
    url: "/@fedify/fedify@0.6.0-dev.104+a35268bc/doc/x/hono/~/federation",
  },
]
`;

snapshot[`fetchSymbolMembers() 1`] = `
[
  {
    kind: "property",
    name: "data",
  },
  {
    kind: "property",
    name: "documentLoader",
  },
  {
    kind: "property",
    name: "contextLoader",
  },
  {
    index: 0,
    kind: "call_signature",
    name: "getNodeInfoUri",
    static: false,
  },
  {
    index: 1,
    kind: "call_signature",
    name: "getActorUri",
    static: false,
  },
  {
    index: 2,
    kind: "call_signature",
    name: "getObjectUri",
    static: false,
  },
  {
    index: 3,
    kind: "call_signature",
    name: "getOutboxUri",
    static: false,
  },
  {
    index: 4,
    kind: "call_signature",
    name: "getInboxUri",
    static: false,
  },
  {
    index: 5,
    kind: "call_signature",
    name: "getInboxUri",
    static: false,
  },
  {
    index: 6,
    kind: "call_signature",
    name: "getFollowingUri",
    static: false,
  },
  {
    index: 7,
    kind: "call_signature",
    name: "getFollowersUri",
    static: false,
  },
  {
    index: 8,
    kind: "call_signature",
    name: "getLikedUri",
    static: false,
  },
  {
    index: 9,
    kind: "call_signature",
    name: "getFeaturedUri",
    static: false,
  },
  {
    index: 10,
    kind: "call_signature",
    name: "getFeaturedTagsUri",
    static: false,
  },
  {
    index: 11,
    kind: "call_signature",
    name: "parseUri",
    static: false,
  },
  {
    index: 12,
    kind: "call_signature",
    name: "getHandleFromActorUri",
    static: false,
  },
  {
    index: 13,
    kind: "call_signature",
    name: "getActorKeyPairs",
    static: false,
  },
  {
    index: 14,
    kind: "call_signature",
    name: "getActorKey",
    static: false,
  },
  {
    index: 15,
    kind: "call_signature",
    name: "getDocumentLoader",
    static: false,
  },
  {
    index: 16,
    kind: "call_signature",
    name: "getDocumentLoader",
    static: false,
  },
  {
    index: 17,
    kind: "call_signature",
    name: "sendActivity",
    static: false,
  },
]
`;

snapshot[`fetchSymbolMembers() 2`] = `
[
  {
    index: 0,
    kind: "constructor",
  },
  {
    kind: "accessor",
    name: "_contextLoader",
  },
  {
    kind: "accessor",
    name: "_documentLoader",
  },
  {
    kind: "accessor",
    name: "attachmentIds",
  },
  {
    kind: "accessor",
    name: "attributionId",
  },
  {
    kind: "accessor",
    name: "attributionIds",
  },
  {
    kind: "accessor",
    name: "audienceId",
  },
  {
    kind: "accessor",
    name: "audienceIds",
  },
  {
    kind: "accessor",
    name: "bccId",
  },
  {
    kind: "accessor",
    name: "bccIds",
  },
  {
    kind: "accessor",
    name: "btoId",
  },
  {
    kind: "accessor",
    name: "btoIds",
  },
  {
    kind: "accessor",
    name: "ccId",
  },
  {
    kind: "accessor",
    name: "ccIds",
  },
  {
    kind: "accessor",
    name: "content",
  },
  {
    kind: "accessor",
    name: "contents",
  },
  {
    kind: "accessor",
    name: "contextIds",
  },
  {
    kind: "accessor",
    name: "duration",
  },
  {
    kind: "accessor",
    name: "endTime",
  },
  {
    kind: "accessor",
    name: "generatorIds",
  },
  {
    kind: "accessor",
    name: "iconId",
  },
  {
    kind: "accessor",
    name: "iconIds",
  },
  {
    kind: "property",
    name: "id",
  },
  {
    kind: "accessor",
    name: "imageId",
  },
  {
    kind: "accessor",
    name: "imageIds",
  },
  {
    kind: "accessor",
    name: "locationId",
  },
  {
    kind: "accessor",
    name: "locationIds",
  },
  {
    kind: "accessor",
    name: "mediaType",
  },
  {
    kind: "accessor",
    name: "name",
  },
  {
    kind: "accessor",
    name: "names",
  },
  {
    kind: "accessor",
    name: "previewId",
  },
  {
    kind: "accessor",
    name: "previewIds",
  },
  {
    kind: "accessor",
    name: "proofId",
  },
  {
    kind: "accessor",
    name: "proofIds",
  },
  {
    kind: "accessor",
    name: "published",
  },
  {
    kind: "accessor",
    name: "repliesId",
  },
  {
    kind: "accessor",
    name: "replyTargetId",
  },
  {
    kind: "accessor",
    name: "replyTargetIds",
  },
  {
    kind: "accessor",
    name: "sensitive",
  },
  {
    kind: "accessor",
    name: "startTime",
  },
  {
    kind: "accessor",
    name: "summaries",
  },
  {
    kind: "accessor",
    name: "summary",
  },
  {
    kind: "accessor",
    name: "tagIds",
  },
  {
    kind: "accessor",
    name: "toId",
  },
  {
    kind: "accessor",
    name: "toIds",
  },
  {
    kind: "accessor",
    name: "updated",
  },
  {
    kind: "accessor",
    name: "url",
  },
  {
    kind: "accessor",
    name: "urls",
  },
  {
    index: 0,
    kind: "method",
    name: '[Symbol.for("Deno.customInspect")]',
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: '[Symbol.for("nodejs.util.inspect.custom")]',
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "_getCustomInspectProxy",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "clone",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getAttachments",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getAttribution",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getAttributions",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getAudience",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getAudiences",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getBcc",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getBccs",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getBto",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getBtos",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getCc",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getCcs",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getContexts",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getGenerators",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getIcon",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getIcons",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getImage",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getImages",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getLocation",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getLocations",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getPreview",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getPreviews",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getProof",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getProofs",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getReplies",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getReplyTarget",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getReplyTargets",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getTags",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getTo",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "getTos",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "toJsonLd",
    static: false,
  },
  {
    kind: "accessor",
    name: "typeId",
  },
  {
    index: 0,
    kind: "method",
    name: "fromJsonLd",
    static: true,
  },
]
`;

snapshot[`fetchSymbolMembers() 3`] = `
[
  {
    index: 0,
    kind: "constructor",
  },
  {
    index: 0,
    kind: "method",
    name: "createContext",
    static: false,
  },
  {
    index: 1,
    kind: "method",
    name: "createContext",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "fetch",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "sendActivity",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setActorDispatcher",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setFeaturedDispatcher",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setFeaturedTagsDispatcher",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setFollowersDispatcher",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setFollowingDispatcher",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setInboxDispatcher",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setInboxListeners",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setLikedDispatcher",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setNodeInfoDispatcher",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setObjectDispatcher",
    static: false,
  },
  {
    index: 1,
    kind: "method",
    name: "setObjectDispatcher",
    static: false,
  },
  {
    index: 2,
    kind: "method",
    name: "setObjectDispatcher",
    static: false,
  },
  {
    index: 3,
    kind: "method",
    name: "setObjectDispatcher",
    static: false,
  },
  {
    index: 4,
    kind: "method",
    name: "setObjectDispatcher",
    static: false,
  },
  {
    index: 5,
    kind: "method",
    name: "setObjectDispatcher",
    static: false,
  },
  {
    index: 0,
    kind: "method",
    name: "setOutboxDispatcher",
    static: false,
  },
]
`;

snapshot[`fetchRootSymbolsWithMembers() 1`] = `
[
  [
    1,
    2,
  ],
  [
    2,
    2,
  ],
]
`;

snapshot[`fetchRootSymbolsWithMembers() 2`] = `
[
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Makes an assertion that the beginning elements of the \`actual\` iterable are
in common with the elements of the \`expected\` array.

\`\`\` typescript
import { assertStreamStartsWith } from "./testing.ts";
import { count } from "./infinite.ts";

Deno.test("your test name", async () => {
  const stream = count(0, 5);
  await assertStreamStartsWith(stream, [0, 5, 10, 15]);
});
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1825,
      col: 0,
      filename: "testing",
      line: 55,
    },
    members: [],
    name: "assertStreamStartsWith",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/assertStreamStartsWith",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Makes an assertion that the elements of the \`actual\` iterable are equal to
the elements of the \`expected\` array.

\`\`\` typescript
import { assertStreams } from "./testing.ts";

async function* gen() { yield "actual"; yield "elements"; }

Deno.test("your test name", async () => {
  const stream = gen();
  await assertStreams(stream, ["actual", "elements"]);
});
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 790,
      col: 0,
      filename: "testing",
      line: 24,
    },
    members: [],
    name: "assertStreams",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/assertStreams",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Concatenates multiple async iterables into one async iterable.

\`\`\` typescript
import { concat } from "./concat.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = concat(gen(), ["a", "b", "c", "d"]);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 8 lines:

~~~
foo
bar
baz
qux
a
b
c
d
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 952,
      col: 0,
      filename: "concat",
      line: 34,
    },
    members: [],
    name: "concat",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/concat",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Makes an infinite async iterable of evenly spaced values starting with
the \`start\` number.

\`\`\` typescript
import { count } from \\"./infinite.ts\\";
const iterable = count(5);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following and keep going forever:

~~~
5
6
7
8
9
(...)
~~~

You could adjust the interval by passing a second argument to \`count()\`:

\`\`\` typescript
import { count } from \\"./infinite.ts\\";
const iterable = count(0, 3);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following and keep going forever:

~~~
0
3
6
9
12
(...)
~~~

As it's infinite, it's usually used with \`break\` to stop the iteration:

\`\`\` typescript
import { count } from \\"./infinite.ts\\";
for await (const value of count(0)) {
  if (value > 4) break;
  console.log(value);
}
\`\`\`

Or with other async generators like \`takeWhile()\`:

\`\`\` typescript
import { count } from \\"./infinite.ts\\";
import { takeWhile } from \\"./take.ts\\";
for await (const value of takeWhile(count(0), v => v <= 4)) {
  console.log(value);
}
\`\`\`

The both examples above will print the following 4 lines:

~~~
0
1
2
3
~~~
",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1608,
      col: 0,
      filename: "infinite",
      line: 79,
    },
    members: [],
    name: "count",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/count",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Makes an async iterator that yields elements from the \`source\` and saving
a copy of each.  When the \`source\` is exhausted, yields saved copies
indefinitely.

Note that it may require significant memory to save the copies
depending on the length of the \`source\`.

\`\`\` typescript
import { cycle } from "./infinite.ts";

async function* gen() { yield 3; yield 6; yield 9; }
const iterable = cycle(gen());
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following and keep going forever:

~~~
3
6
9
3
6
9
(...)
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 3000,
      col: 0,
      filename: "infinite",
      line: 136,
    },
    members: [],
    name: "cycle",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/cycle",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Drops a specified number of elements from the beginning of an async iterable,
and yields the remaining elements.

\`\`\` typescript
import { drop } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = drop(gen(), 2);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following 2 lines:

~~~
baz
qux
~~~

If the iterable is shorter than or equal to the specified number, no elements
are yielded.

\`\`\` typescript
import { drop } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = drop(gen(), 4);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print nothing.
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1286,
      col: 0,
      filename: "drop",
      line: 45,
    },
    members: [],
    name: "drop",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/drop",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Drops a specified number of elements from the end of an async iterable, and
yields the remaining elements.

\`\`\` typescript
import { dropEnd } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropEnd(gen(), 2);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 2 lines:

~~~
foo
bar
~~~

If the iterable is shorter than or equal to the specified number, no elements
are yielded.

\`\`\` typescript
import { dropEnd } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropEnd(gen(), 4);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print nothing.
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 5414,
      col: 0,
      filename: "drop",
      line: 180,
    },
    members: [],
    name: "dropEnd",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/dropEnd",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Drops elements from the beginning of an async iterable as long as a specified
condition is met, and yields the remaining elements.

\`\`\` typescript
import { dropWhile } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropWhile(gen(), v => v !== "baz");
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following 2 lines:

~~~
baz
qux
~~~

An async \`predicate\` function also works.  The following example will print
the same 2 lines as the previous example:

\`\`\` typescript
import { dropWhile } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropWhile(gen(), v => Promise.resolve(v !== "baz"));
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

A \`predicate\` function can take an index as well as the value.

\`\`\` typescript
import { dropWhile } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropWhile(gen(), (_, i) => i % 2 === 0);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following 3 lines:

~~~
bar
baz
qux
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 3591,
      col: 0,
      filename: "drop",
      line: 122,
    },
    members: [],
    name: "dropWhile",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/dropWhile",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Eliminates all elements from the iterable \`source\` that do not satisfy
the \`predicate\` function.

\`\`\` typescript
import { filter } from "./filter.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = filter((v: string) => !!v.match(/^b/), gen());
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 2 lines:

~~~
bar
baz
~~~

The \`predicate\` function can take an index as well as the value.

\`\`\` typescript
import { filter } from "./filter.ts";

const iterable = filter(
  (v: string, i: number) => !v.match(/^b/) && i % 2 === 0,
  ["foo", "bar", "baz", "qux", "quux"]
);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 2 lines:

~~~
foo
quux
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1566,
      col: 0,
      filename: "filter",
      line: 50,
    },
    members: [],
    name: "filter",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/filter",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Turns a synchrnous iterable \`source\` into an async iterable.

\`\`\` typescript
import { fromIterable } from "./collections.ts";

function* iterable() { yield 1; yield 2; yield 3; }
const asyncIterable = fromIterable(iterable());
for await (const value of asyncIterable) console.log(value);
\`\`\`

The above example will print the following lines:

~~~
1
2
3
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 753,
      col: 0,
      filename: "collections",
      line: 27,
    },
    members: [],
    name: "fromIterable",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/fromIterable",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Groups elmenets of an async interable \`source\` according to a specified
\`keySelector\` function and creates a map of each group key to the elements in
that group.  Key values are compared using the \`===\` operator.

\`\`\` typescript
import { groupBy } from "./unique.ts";

interface IdName { id: number; name: string; }
async function* gen(): AsyncIterableIterator<IdName> {
  yield { id: 1, name: "foo" };
  yield { id: 2, name: "bar" };
  yield { id: 3, name: "bar" };
  yield { id: 4, name: "foo" };
}

const map = await groupBy<string, IdName>(gen(), o => o.name);
console.log(map);
\`\`\`

The above example will print the following:

~~~
Map {
 "foo" => [ { id: 1, name: "foo" }, { id: 4, name: "foo" } ],
 "bar" => [ { id: 2, name: "bar" }, { id: 3, name: "bar" } ]
}
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 3571,
      col: 0,
      filename: "unique",
      line: 120,
    },
    members: [],
    name: "groupBy",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/groupBy",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Transforms every element of the iterable \`source\` into a new iterable.

\`\`\` typescript
import { map } from "./map.ts";
import { count } from "./infinite.ts";

const iterable = map((v: number) => v * 2, count());
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following and keep going forever:

~~~
0
2
4
6
(...)
~~~

The \`fn\` function can take an additional argument, which is the index of the
element in the iterable.

\`\`\` typescript
import { map } from "./map.ts";

const iterable = map(
  (v: string, i: number) => \`\${i}. \${v.toUpperCase()}\`,
  ["foo", "bar", "baz", "qux"]
);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 4 lines:

~~~
0. FOO
1. BAR
2. BAZ
3. QUX
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
    ],
    location: {
      byteIndex: 1416,
      col: 0,
      filename: "map",
      line: 54,
    },
    members: [],
    name: "map",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/map",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Creates a {@link Range} of numbers from 0 to \`stop\` with step 1.

\`\`\` typescript
import { range } from "./range.ts";

for (const value of range(4)) console.log(value);
\`\`\`

The above example will print the following 4 lines:

~~~
0
1
2
3
~~~

Note that the type of the range is \`Range<number>\`, which implements
both \`Iterable<number>\` and \`AsyncIterable<number>\`.
',
    file: ".",
    kind: [
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
    ],
    location: {
      byteIndex: 466,
      col: 0,
      filename: "range",
      line: 24,
    },
    members: [],
    name: "range",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/range",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Apply \`reducer\` function of two arguments cumulatively to the elements of
an async iterable \`source\`, from left to right, so as to reduce the async
iterable to a single value.

\`\`\` typescript
import { reduce } from "./fold.ts";

async function* oneToFive() { yield 1; yield 2; yield 3; yield 4; yield 5; }
const reducedValue = await reduce(
  (x, y) => { console.log(\`\${x} + \${y} = \${x + y}\`); return x + y; },
  oneToFive(),
  0,
);
console.log("reduced value:", reducedValue);
\`\`\`

The above example will print the following:

~~~
0 + 1 = 1
1 + 2 = 3
3 + 3 = 6
6 + 4 = 10
10 + 5 = 15
reduced value: 15
~~~

If the async iterable \`source\` is empty, the \`reducer\` function is not
called and \`initialValue\` is returned.

\`\`\` typescript
import { reduce } from "./fold.ts";

const reducedValue = await reduce(
  (x, y) => { console.log(\`\${x} + \${y} = \${x * y}\`); return x * y; },
  [],
  1,
);
console.log("reduced value:", reducedValue);
\`\`\`

The above example will print the following:

~~~
reduced value: 1
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
    ],
    location: {
      byteIndex: 1992,
      col: 0,
      filename: "fold",
      line: 63,
    },
    members: [],
    name: "reduce",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/reduce",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Makes an async iterator that yields the same value over and over again.
It will repeat indefinitely unless \`times\` is specified.

\`\`\` typescript
import { repeat } from "./infinite.ts";

const iterable = repeat("v");
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following and keep going forever:

~~~
v
v
v
(...)
~~~

However, if you specify the second parameter \`times\` it will repeat that many
times:

\`\`\` typescript
import { repeat } from "./infinite.ts";

const iterable = repeat("V", 3);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 3 lines:

~~~
V
V
V
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 4464,
      col: 0,
      filename: "infinite",
      line: 197,
    },
    members: [],
    name: "repeat",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/repeat",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Takes a specified number of elements from the beginning of an async iterable.

\`\`\` typescript
import { take } from "./take.ts";
import { count } from "./infinite.ts";

const iterable = take(count(0, 5), 3);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following 3 lines:

~~~
0
5
10
~~~

If the iterable is shorter than the specified number, the whole elements are
taken.

\`\`\` typescript
import { take } from "./take.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; }
const iterable = take(gen(), 5);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print only 3 elements, because \`gen()\` yields only 3
elements:

~~~
foo
bar
baz
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1238,
      col: 0,
      filename: "take",
      line: 50,
    },
    members: [],
    name: "take",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/take",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Takes a specified number of elements from the end of an async iterable.

\`\`\` typescript
import { takeEnd } from "./take.ts";
import { range } from "./range.ts";

const iterable = takeEnd(range(10), 3);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 3 lines:

~~~
7
8
9
~~~

If the iterable is shorter than the specified number, the whole elements are
taken.

\`\`\` typescript
import { takeEnd } from "./take.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; }
const iterable = takeEnd(gen(), 5);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print only 3 elements, because \`gen()\` yields only 3
elements:

~~~
foo
bar
baz
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 5072,
      col: 0,
      filename: "take",
      line: 185,
    },
    members: [],
    name: "takeEnd",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/takeEnd",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Takes elements from the beginning of an async iterable as long as a specified
condition is met.  If the condition is not met, the iterable stops.

\`\`\` typescript
import { takeWhile } from "./take.ts";
import { count } from "./infinite.ts";

const iterable = takeWhile(count(0), v => v < 4);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 4 lines:

~~~
0
1
2
3
~~~

An async \`predicate\` function also works.  The following example will print
the same 4 lines as the previous example:

\`\`\` typescript
import { takeWhile } from "./take.ts";
import { count } from "./infinite.ts";

const iterable = takeWhile(count(0), v => Promise.resolve(v < 4));
for await (const value of iterable) console.log(value);
\`\`\`

A \`predicate\` function can take an index as well as the value.

\`\`\` typescript
import { takeWhile } from "./take.ts";
import { count } from "./infinite.ts";

const iterable = takeWhile(count(0, 10), (_, i) => i < 4);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 4 lines:

~~~
0
10
20
30
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 3391,
      col: 0,
      filename: "take",
      line: 124,
    },
    members: [],
    name: "takeWhile",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/takeWhile",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "",
    file: ".",
    kind: [
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
    ],
    location: {
      byteIndex: 50,
      col: 0,
      filename: "tee",
      line: 3,
    },
    members: [],
    name: "tee",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/tee",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Creates an array from an async iterable.

\`\`\` typescript
import { toArray } from "./collections.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; }
const array = await toArray(gen());
\`\`\`

The \`array\` variable will be an array like \`["foo", "bar", "baz"]\`.

Note that its first parameter is assumed to be finite; otherwise, it will
never return.  The following example will never return:

\`\`\` typescript
import { toArray } from "./collections.ts";
import { count } from "./infinite.ts";

await toArray(count(0));
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1722,
      col: 0,
      filename: "collections",
      line: 59,
    },
    members: [],
    name: "toArray",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/toArray",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Creates a map from an async iterable of key-value pairs.  Each pair is
represented as an array of two elements.

\`\`\` typescript
import { toMap } from "./collections.ts";

async function* gen(): AsyncIterableIterator<[string, number]> {
  yield ["foo", 1]; yield ["bar", 2]; yield ["baz", 3]; yield ["qux", 4];
}
const map = await toMap<string, number>(gen());
\`\`\`

The \`map\` variable will be a map like \`Map { "foo" => 1, "bar" => 2,
"baz" => 3, "qux" => 4 }\`.

Duplicate keys are removed except for the last occurrence of each key.  E.g.:

\`\`\` typescript
import { fromIterable, toMap } from "./collections.ts";

const iterable = fromIterable<[string, number]>([
  ["foo", 1], ["bar", 2], ["baz", 3], ["qux", 4],
  ["foo", 5], ["bar", 6],
]);
const map = await toMap<string, number>(iterable);
\`\`\`

The \`map\` variable will be a map like \`Map { "foo" => 5, "bar" => 6,
"baz" => 3, "qux" => 4 }\`.

Note that the iterable \`source\` is assumed to be finite; otherwise, it will
never return.  The following example will never return:

\`\`\` typescript
import { toMap } from "./collections.ts";
import { count } from "./infinite.ts";
import { map } from "./map.ts";

await toMap<number, number>(
  map((v: number) => [v, v] as [number, number], count(0))
);
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 5175,
      col: 0,
      filename: "collections",
      line: 162,
    },
    members: [],
    name: "toMap",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/toMap",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Creates a set from an async iterable.

\`\`\` typescript
import { toSet } from "./collections.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; }
const set = await toSet(gen());
\`\`\`

The \`set\` variable will be a set like \`new Set(["foo", "bar", "baz"])\`.

Duplicate elements are removed except for the first occurrence of each
element.  E.g.:

\`\`\` typescript
import { toSet } from "./collections.ts";

async function* gen() { yield "foo"; yield "bar"; yield "foo"; }
const set = await toSet(gen());
\`\`\`

The \`set\` variable will be a set like \`new Set(["foo", "bar"])\`.

Note that the iterable \`source\` is assumed to be finite; otherwise, it will
never return.  The following example will never return:

\`\`\` typescript
import { toSet } from "./collections.ts";
import { count } from "./infinite.ts";

await toSet(count(0));
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 3136,
      col: 0,
      filename: "collections",
      line: 104,
    },
    members: [],
    name: "toSet",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/toSet",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Eliminate duplicates in an async iterable \`source\`.

\`\`\` typescript
import { unique } from "./unique.ts";

async function* gen() { yield "foo"; yield "bar"; yield "bar"; yield "foo" }
const iterable = unique(gen());
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 2 lines:

~~~
foo
bar
~~~

For complex elements, the \`keySelector\` function can be used to specify how
to compare the elements.   Among duplicate elements, the one with the first
occurrence of the key is kept.  E.g.:

\`\`\` typescript
import { unique } from "./unique.ts";

async function* gen() {
  yield { id: 1, name: "foo" };
  yield { id: 2, name: "bar" };
  yield { id: 3, name: "bar" };
  yield { id: 4, name: "foo" };
}

console.log("Unique by ID:");
const uniqueIds = unique(gen(), v => v.id);
for await (const value of uniqueIds) console.log(value);

console.log("Unique by name:");
const uniqueNames = unique(gen(), v => v.name);
for await (const value of uniqueNames) console.log(value);
\`\`\`

The above example will print the following:

~~~
Unique by ID:
{ id: 1, name: "foo" }
{ id: 2, name: "bar" }
{ id: 3, name: "bar" }
{ id: 4, name: "foo" }
Unique by name:
{ id: 1, name: "foo" }
{ id: 2, name: "bar" }
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    location: {
      byteIndex: 1848,
      col: 0,
      filename: "unique",
      line: 63,
    },
    members: [],
    name: "unique",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/unique",
  },
  {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "An immutable sequence of numbers.  It implements both \`Iterable\` and
\`AsyncIterable\`.

It is similar to Python's \`range()\` function.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    location: {
      byteIndex: 4383,
      col: 0,
      filename: "range",
      line: 185,
    },
    members: [
      {
        index: 0,
        kind: "constructor",
      },
      {
        kind: "accessor",
        name: "length",
      },
      {
        kind: "property",
        name: "start",
      },
      {
        kind: "property",
        name: "step",
      },
      {
        kind: "property",
        name: "stop",
      },
      {
        index: 0,
        kind: "method",
        name: "[Symbol.asyncIterator]",
        static: false,
      },
      {
        index: 0,
        kind: "method",
        name: "[Symbol.iterator]",
        static: false,
      },
      {
        index: 0,
        kind: "method",
        name: "at",
        static: false,
      },
      {
        index: 0,
        kind: "method",
        name: "toString",
        static: false,
      },
    ],
    name: "Range",
    url: "/@hongminhee/aitertools@0.6.0/doc/~/Range",
  },
]
`;

snapshot[`fetchIndex() 1`] = `
[
  [
    1,
    2,
  ],
  [
    2,
    2,
  ],
]
`;

snapshot[`fetchIndex() 2`] = `
{
  "Range.[Symbol.asyncIterator]()": {
    index: 0,
    kind: "method",
    label: "Range.[Symbol.asyncIterator]()",
    name: "[Symbol.asyncIterator]",
    static: false,
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.asyncIterator]",
  },
  "Range.[Symbol.iterator]()": {
    index: 0,
    kind: "method",
    label: "Range.[Symbol.iterator]()",
    name: "[Symbol.iterator]",
    static: false,
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.iterator]",
  },
  "Range.at()": {
    index: 0,
    kind: "method",
    label: "Range.at()",
    name: "at",
    static: false,
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.at",
  },
  "Range.length": {
    kind: "accessor",
    label: "Range.length",
    name: "length",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.length",
  },
  "Range.start": {
    kind: "property",
    label: "Range.start",
    name: "start",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.start",
  },
  "Range.step": {
    kind: "property",
    label: "Range.step",
    name: "step",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.step",
  },
  "Range.stop": {
    kind: "property",
    label: "Range.stop",
    name: "stop",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.stop",
  },
  "Range.toString()": {
    index: 0,
    kind: "method",
    label: "Range.toString()",
    name: "toString",
    static: false,
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.toString",
  },
  "assertStreamStartsWith()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Makes an assertion that the beginning elements of the \`actual\` iterable are
in common with the elements of the \`expected\` array.

\`\`\` typescript
import { assertStreamStartsWith } from "./testing.ts";
import { count } from "./infinite.ts";

Deno.test("your test name", async () => {
  const stream = count(0, 5);
  await assertStreamStartsWith(stream, [0, 5, 10, 15]);
});
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "assertStreamStartsWith()",
    location: {
      byteIndex: 1825,
      col: 0,
      filename: "testing",
      line: 55,
    },
    members: [],
    name: "assertStreamStartsWith",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/assertStreamStartsWith",
  },
  "assertStreams()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Makes an assertion that the elements of the \`actual\` iterable are equal to
the elements of the \`expected\` array.

\`\`\` typescript
import { assertStreams } from "./testing.ts";

async function* gen() { yield "actual"; yield "elements"; }

Deno.test("your test name", async () => {
  const stream = gen();
  await assertStreams(stream, ["actual", "elements"]);
});
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "assertStreams()",
    location: {
      byteIndex: 790,
      col: 0,
      filename: "testing",
      line: 24,
    },
    members: [],
    name: "assertStreams",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/assertStreams",
  },
  "concat()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Concatenates multiple async iterables into one async iterable.

\`\`\` typescript
import { concat } from "./concat.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = concat(gen(), ["a", "b", "c", "d"]);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 8 lines:

~~~
foo
bar
baz
qux
a
b
c
d
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "concat()",
    location: {
      byteIndex: 952,
      col: 0,
      filename: "concat",
      line: 34,
    },
    members: [],
    name: "concat",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/concat",
  },
  "count()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "Makes an infinite async iterable of evenly spaced values starting with
the \`start\` number.

\`\`\` typescript
import { count } from \\"./infinite.ts\\";
const iterable = count(5);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following and keep going forever:

~~~
5
6
7
8
9
(...)
~~~

You could adjust the interval by passing a second argument to \`count()\`:

\`\`\` typescript
import { count } from \\"./infinite.ts\\";
const iterable = count(0, 3);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following and keep going forever:

~~~
0
3
6
9
12
(...)
~~~

As it's infinite, it's usually used with \`break\` to stop the iteration:

\`\`\` typescript
import { count } from \\"./infinite.ts\\";
for await (const value of count(0)) {
  if (value > 4) break;
  console.log(value);
}
\`\`\`

Or with other async generators like \`takeWhile()\`:

\`\`\` typescript
import { count } from \\"./infinite.ts\\";
import { takeWhile } from \\"./take.ts\\";
for await (const value of takeWhile(count(0), v => v <= 4)) {
  console.log(value);
}
\`\`\`

The both examples above will print the following 4 lines:

~~~
0
1
2
3
~~~
",
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "count()",
    location: {
      byteIndex: 1608,
      col: 0,
      filename: "infinite",
      line: 79,
    },
    members: [],
    name: "count",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/count",
  },
  "cycle()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Makes an async iterator that yields elements from the \`source\` and saving
a copy of each.  When the \`source\` is exhausted, yields saved copies
indefinitely.

Note that it may require significant memory to save the copies
depending on the length of the \`source\`.

\`\`\` typescript
import { cycle } from "./infinite.ts";

async function* gen() { yield 3; yield 6; yield 9; }
const iterable = cycle(gen());
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following and keep going forever:

~~~
3
6
9
3
6
9
(...)
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "cycle()",
    location: {
      byteIndex: 3000,
      col: 0,
      filename: "infinite",
      line: 136,
    },
    members: [],
    name: "cycle",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/cycle",
  },
  "drop()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Drops a specified number of elements from the beginning of an async iterable,
and yields the remaining elements.

\`\`\` typescript
import { drop } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = drop(gen(), 2);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following 2 lines:

~~~
baz
qux
~~~

If the iterable is shorter than or equal to the specified number, no elements
are yielded.

\`\`\` typescript
import { drop } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = drop(gen(), 4);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print nothing.
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "drop()",
    location: {
      byteIndex: 1286,
      col: 0,
      filename: "drop",
      line: 45,
    },
    members: [],
    name: "drop",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/drop",
  },
  "dropEnd()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Drops a specified number of elements from the end of an async iterable, and
yields the remaining elements.

\`\`\` typescript
import { dropEnd } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropEnd(gen(), 2);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 2 lines:

~~~
foo
bar
~~~

If the iterable is shorter than or equal to the specified number, no elements
are yielded.

\`\`\` typescript
import { dropEnd } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropEnd(gen(), 4);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print nothing.
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "dropEnd()",
    location: {
      byteIndex: 5414,
      col: 0,
      filename: "drop",
      line: 180,
    },
    members: [],
    name: "dropEnd",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/dropEnd",
  },
  "dropWhile()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Drops elements from the beginning of an async iterable as long as a specified
condition is met, and yields the remaining elements.

\`\`\` typescript
import { dropWhile } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropWhile(gen(), v => v !== "baz");
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following 2 lines:

~~~
baz
qux
~~~

An async \`predicate\` function also works.  The following example will print
the same 2 lines as the previous example:

\`\`\` typescript
import { dropWhile } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropWhile(gen(), v => Promise.resolve(v !== "baz"));
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

A \`predicate\` function can take an index as well as the value.

\`\`\` typescript
import { dropWhile } from "./drop.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = dropWhile(gen(), (_, i) => i % 2 === 0);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following 3 lines:

~~~
bar
baz
qux
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "dropWhile()",
    location: {
      byteIndex: 3591,
      col: 0,
      filename: "drop",
      line: 122,
    },
    members: [],
    name: "dropWhile",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/dropWhile",
  },
  "filter()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Eliminates all elements from the iterable \`source\` that do not satisfy
the \`predicate\` function.

\`\`\` typescript
import { filter } from "./filter.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; yield "qux" }
const iterable = filter((v: string) => !!v.match(/^b/), gen());
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 2 lines:

~~~
bar
baz
~~~

The \`predicate\` function can take an index as well as the value.

\`\`\` typescript
import { filter } from "./filter.ts";

const iterable = filter(
  (v: string, i: number) => !v.match(/^b/) && i % 2 === 0,
  ["foo", "bar", "baz", "qux", "quux"]
);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 2 lines:

~~~
foo
quux
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "filter()",
    location: {
      byteIndex: 1566,
      col: 0,
      filename: "filter",
      line: 50,
    },
    members: [],
    name: "filter",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/filter",
  },
  "fromIterable()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Turns a synchrnous iterable \`source\` into an async iterable.

\`\`\` typescript
import { fromIterable } from "./collections.ts";

function* iterable() { yield 1; yield 2; yield 3; }
const asyncIterable = fromIterable(iterable());
for await (const value of asyncIterable) console.log(value);
\`\`\`

The above example will print the following lines:

~~~
1
2
3
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "fromIterable()",
    location: {
      byteIndex: 753,
      col: 0,
      filename: "collections",
      line: 27,
    },
    members: [],
    name: "fromIterable",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/fromIterable",
  },
  "groupBy()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Groups elmenets of an async interable \`source\` according to a specified
\`keySelector\` function and creates a map of each group key to the elements in
that group.  Key values are compared using the \`===\` operator.

\`\`\` typescript
import { groupBy } from "./unique.ts";

interface IdName { id: number; name: string; }
async function* gen(): AsyncIterableIterator<IdName> {
  yield { id: 1, name: "foo" };
  yield { id: 2, name: "bar" };
  yield { id: 3, name: "bar" };
  yield { id: 4, name: "foo" };
}

const map = await groupBy<string, IdName>(gen(), o => o.name);
console.log(map);
\`\`\`

The above example will print the following:

~~~
Map {
 "foo" => [ { id: 1, name: "foo" }, { id: 4, name: "foo" } ],
 "bar" => [ { id: 2, name: "bar" }, { id: 3, name: "bar" } ]
}
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "groupBy()",
    location: {
      byteIndex: 3571,
      col: 0,
      filename: "unique",
      line: 120,
    },
    members: [],
    name: "groupBy",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/groupBy",
  },
  "map()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Transforms every element of the iterable \`source\` into a new iterable.

\`\`\` typescript
import { map } from "./map.ts";
import { count } from "./infinite.ts";

const iterable = map((v: number) => v * 2, count());
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following and keep going forever:

~~~
0
2
4
6
(...)
~~~

The \`fn\` function can take an additional argument, which is the index of the
element in the iterable.

\`\`\` typescript
import { map } from "./map.ts";

const iterable = map(
  (v: string, i: number) => \`\${i}. \${v.toUpperCase()}\`,
  ["foo", "bar", "baz", "qux"]
);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 4 lines:

~~~
0. FOO
1. BAR
2. BAZ
3. QUX
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
    ],
    label: "map()",
    location: {
      byteIndex: 1416,
      col: 0,
      filename: "map",
      line: 54,
    },
    members: [],
    name: "map",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/map",
  },
  "new Range()": {
    index: 0,
    kind: "constructor",
    label: "new Range()",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range#constructor_0",
  },
  "range()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Creates a {@link Range} of numbers from 0 to \`stop\` with step 1.

\`\`\` typescript
import { range } from "./range.ts";

for (const value of range(4)) console.log(value);
\`\`\`

The above example will print the following 4 lines:

~~~
0
1
2
3
~~~

Note that the type of the range is \`Range<number>\`, which implements
both \`Iterable<number>\` and \`AsyncIterable<number>\`.
',
    file: ".",
    kind: [
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
    ],
    label: "range()",
    location: {
      byteIndex: 466,
      col: 0,
      filename: "range",
      line: 24,
    },
    members: [],
    name: "range",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/range",
  },
  "reduce()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Apply \`reducer\` function of two arguments cumulatively to the elements of
an async iterable \`source\`, from left to right, so as to reduce the async
iterable to a single value.

\`\`\` typescript
import { reduce } from "./fold.ts";

async function* oneToFive() { yield 1; yield 2; yield 3; yield 4; yield 5; }
const reducedValue = await reduce(
  (x, y) => { console.log(\`\${x} + \${y} = \${x + y}\`); return x + y; },
  oneToFive(),
  0,
);
console.log("reduced value:", reducedValue);
\`\`\`

The above example will print the following:

~~~
0 + 1 = 1
1 + 2 = 3
3 + 3 = 6
6 + 4 = 10
10 + 5 = 15
reduced value: 15
~~~

If the async iterable \`source\` is empty, the \`reducer\` function is not
called and \`initialValue\` is returned.

\`\`\` typescript
import { reduce } from "./fold.ts";

const reducedValue = await reduce(
  (x, y) => { console.log(\`\${x} + \${y} = \${x * y}\`); return x * y; },
  [],
  1,
);
console.log("reduced value:", reducedValue);
\`\`\`

The above example will print the following:

~~~
reduced value: 1
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
    ],
    label: "reduce()",
    location: {
      byteIndex: 1992,
      col: 0,
      filename: "fold",
      line: 63,
    },
    members: [],
    name: "reduce",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/reduce",
  },
  "repeat()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Makes an async iterator that yields the same value over and over again.
It will repeat indefinitely unless \`times\` is specified.

\`\`\` typescript
import { repeat } from "./infinite.ts";

const iterable = repeat("v");
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following and keep going forever:

~~~
v
v
v
(...)
~~~

However, if you specify the second parameter \`times\` it will repeat that many
times:

\`\`\` typescript
import { repeat } from "./infinite.ts";

const iterable = repeat("V", 3);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 3 lines:

~~~
V
V
V
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "repeat()",
    location: {
      byteIndex: 4464,
      col: 0,
      filename: "infinite",
      line: 197,
    },
    members: [],
    name: "repeat",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/repeat",
  },
  "take()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Takes a specified number of elements from the beginning of an async iterable.

\`\`\` typescript
import { take } from "./take.ts";
import { count } from "./infinite.ts";

const iterable = take(count(0, 5), 3);
for await (const value of iterable) {
  console.log(value);
}
\`\`\`

The above example will print the following 3 lines:

~~~
0
5
10
~~~

If the iterable is shorter than the specified number, the whole elements are
taken.

\`\`\` typescript
import { take } from "./take.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; }
const iterable = take(gen(), 5);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print only 3 elements, because \`gen()\` yields only 3
elements:

~~~
foo
bar
baz
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "take()",
    location: {
      byteIndex: 1238,
      col: 0,
      filename: "take",
      line: 50,
    },
    members: [],
    name: "take",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/take",
  },
  "takeEnd()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Takes a specified number of elements from the end of an async iterable.

\`\`\` typescript
import { takeEnd } from "./take.ts";
import { range } from "./range.ts";

const iterable = takeEnd(range(10), 3);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 3 lines:

~~~
7
8
9
~~~

If the iterable is shorter than the specified number, the whole elements are
taken.

\`\`\` typescript
import { takeEnd } from "./take.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; }
const iterable = takeEnd(gen(), 5);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print only 3 elements, because \`gen()\` yields only 3
elements:

~~~
foo
bar
baz
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "takeEnd()",
    location: {
      byteIndex: 5072,
      col: 0,
      filename: "take",
      line: 185,
    },
    members: [],
    name: "takeEnd",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/takeEnd",
  },
  "takeWhile()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Takes elements from the beginning of an async iterable as long as a specified
condition is met.  If the condition is not met, the iterable stops.

\`\`\` typescript
import { takeWhile } from "./take.ts";
import { count } from "./infinite.ts";

const iterable = takeWhile(count(0), v => v < 4);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 4 lines:

~~~
0
1
2
3
~~~

An async \`predicate\` function also works.  The following example will print
the same 4 lines as the previous example:

\`\`\` typescript
import { takeWhile } from "./take.ts";
import { count } from "./infinite.ts";

const iterable = takeWhile(count(0), v => Promise.resolve(v < 4));
for await (const value of iterable) console.log(value);
\`\`\`

A \`predicate\` function can take an index as well as the value.

\`\`\` typescript
import { takeWhile } from "./take.ts";
import { count } from "./infinite.ts";

const iterable = takeWhile(count(0, 10), (_, i) => i < 4);
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 4 lines:

~~~
0
10
20
30
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "takeWhile()",
    location: {
      byteIndex: 3391,
      col: 0,
      filename: "take",
      line: 124,
    },
    members: [],
    name: "takeWhile",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/takeWhile",
  },
  "tee()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "",
    file: ".",
    kind: [
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
      "function",
    ],
    label: "tee()",
    location: {
      byteIndex: 50,
      col: 0,
      filename: "tee",
      line: 3,
    },
    members: [],
    name: "tee",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/tee",
  },
  "toArray()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Creates an array from an async iterable.

\`\`\` typescript
import { toArray } from "./collections.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; }
const array = await toArray(gen());
\`\`\`

The \`array\` variable will be an array like \`["foo", "bar", "baz"]\`.

Note that its first parameter is assumed to be finite; otherwise, it will
never return.  The following example will never return:

\`\`\` typescript
import { toArray } from "./collections.ts";
import { count } from "./infinite.ts";

await toArray(count(0));
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "toArray()",
    location: {
      byteIndex: 1722,
      col: 0,
      filename: "collections",
      line: 59,
    },
    members: [],
    name: "toArray",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/toArray",
  },
  "toMap()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Creates a map from an async iterable of key-value pairs.  Each pair is
represented as an array of two elements.

\`\`\` typescript
import { toMap } from "./collections.ts";

async function* gen(): AsyncIterableIterator<[string, number]> {
  yield ["foo", 1]; yield ["bar", 2]; yield ["baz", 3]; yield ["qux", 4];
}
const map = await toMap<string, number>(gen());
\`\`\`

The \`map\` variable will be a map like \`Map { "foo" => 1, "bar" => 2,
"baz" => 3, "qux" => 4 }\`.

Duplicate keys are removed except for the last occurrence of each key.  E.g.:

\`\`\` typescript
import { fromIterable, toMap } from "./collections.ts";

const iterable = fromIterable<[string, number]>([
  ["foo", 1], ["bar", 2], ["baz", 3], ["qux", 4],
  ["foo", 5], ["bar", 6],
]);
const map = await toMap<string, number>(iterable);
\`\`\`

The \`map\` variable will be a map like \`Map { "foo" => 5, "bar" => 6,
"baz" => 3, "qux" => 4 }\`.

Note that the iterable \`source\` is assumed to be finite; otherwise, it will
never return.  The following example will never return:

\`\`\` typescript
import { toMap } from "./collections.ts";
import { count } from "./infinite.ts";
import { map } from "./map.ts";

await toMap<number, number>(
  map((v: number) => [v, v] as [number, number], count(0))
);
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "toMap()",
    location: {
      byteIndex: 5175,
      col: 0,
      filename: "collections",
      line: 162,
    },
    members: [],
    name: "toMap",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/toMap",
  },
  "toSet()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Creates a set from an async iterable.

\`\`\` typescript
import { toSet } from "./collections.ts";

async function* gen() { yield "foo"; yield "bar"; yield "baz"; }
const set = await toSet(gen());
\`\`\`

The \`set\` variable will be a set like \`new Set(["foo", "bar", "baz"])\`.

Duplicate elements are removed except for the first occurrence of each
element.  E.g.:

\`\`\` typescript
import { toSet } from "./collections.ts";

async function* gen() { yield "foo"; yield "bar"; yield "foo"; }
const set = await toSet(gen());
\`\`\`

The \`set\` variable will be a set like \`new Set(["foo", "bar"])\`.

Note that the iterable \`source\` is assumed to be finite; otherwise, it will
never return.  The following example will never return:

\`\`\` typescript
import { toSet } from "./collections.ts";
import { count } from "./infinite.ts";

await toSet(count(0));
\`\`\`
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "toSet()",
    location: {
      byteIndex: 3136,
      col: 0,
      filename: "collections",
      line: 104,
    },
    members: [],
    name: "toSet",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/toSet",
  },
  "unique()": {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: 'Eliminate duplicates in an async iterable \`source\`.

\`\`\` typescript
import { unique } from "./unique.ts";

async function* gen() { yield "foo"; yield "bar"; yield "bar"; yield "foo" }
const iterable = unique(gen());
for await (const value of iterable) console.log(value);
\`\`\`

The above example will print the following 2 lines:

~~~
foo
bar
~~~

For complex elements, the \`keySelector\` function can be used to specify how
to compare the elements.   Among duplicate elements, the one with the first
occurrence of the key is kept.  E.g.:

\`\`\` typescript
import { unique } from "./unique.ts";

async function* gen() {
  yield { id: 1, name: "foo" };
  yield { id: 2, name: "bar" };
  yield { id: 3, name: "bar" };
  yield { id: 4, name: "foo" };
}

console.log("Unique by ID:");
const uniqueIds = unique(gen(), v => v.id);
for await (const value of uniqueIds) console.log(value);

console.log("Unique by name:");
const uniqueNames = unique(gen(), v => v.name);
for await (const value of uniqueNames) console.log(value);
\`\`\`

The above example will print the following:

~~~
Unique by ID:
{ id: 1, name: "foo" }
{ id: 2, name: "bar" }
{ id: 3, name: "bar" }
{ id: 4, name: "foo" }
Unique by name:
{ id: 1, name: "foo" }
{ id: 2, name: "bar" }
~~~
',
    file: ".",
    kind: [
      "function",
      "function",
    ],
    label: "unique()",
    location: {
      byteIndex: 1848,
      col: 0,
      filename: "unique",
      line: 63,
    },
    members: [],
    name: "unique",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/unique",
  },
  "~Range.[Symbol.asyncIterator]()": {
    index: 0,
    kind: "method",
    label: "[Symbol.asyncIterator]()",
    name: "[Symbol.asyncIterator]",
    static: false,
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.asyncIterator]",
  },
  "~Range.[Symbol.iterator]()": {
    index: 0,
    kind: "method",
    label: "[Symbol.iterator]()",
    name: "[Symbol.iterator]",
    static: false,
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.[Symbol.iterator]",
  },
  "~Range.at()": {
    index: 0,
    kind: "method",
    label: "at()",
    name: "at",
    static: false,
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.at",
  },
  "~Range.length": {
    kind: "accessor",
    label: "length",
    name: "length",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.length",
  },
  "~Range.start": {
    kind: "property",
    label: "start",
    name: "start",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.start",
  },
  "~Range.step": {
    kind: "property",
    label: "step",
    name: "step",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.step",
  },
  "~Range.stop": {
    kind: "property",
    label: "stop",
    name: "stop",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.stop",
  },
  "~Range.toString()": {
    index: 0,
    kind: "method",
    label: "toString()",
    name: "toString",
    static: false,
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range.prototype.toString",
  },
  Range: {
    category: "",
    declarationKind: "export",
    deprecated: false,
    doc: "An immutable sequence of numbers.  It implements both \`Iterable\` and
\`AsyncIterable\`.

It is similar to Python's \`range()\` function.",
    file: ".",
    kind: [
      "class",
      "class",
    ],
    label: "Range",
    location: {
      byteIndex: 4383,
      col: 0,
      filename: "range",
      line: 185,
    },
    members: [
      {
        index: 0,
        kind: "constructor",
      },
      {
        kind: "accessor",
        name: "length",
      },
      {
        kind: "property",
        name: "start",
      },
      {
        kind: "property",
        name: "step",
      },
      {
        kind: "property",
        name: "stop",
      },
      {
        index: 0,
        kind: "method",
        name: "[Symbol.asyncIterator]",
        static: false,
      },
      {
        index: 0,
        kind: "method",
        name: "[Symbol.iterator]",
        static: false,
      },
      {
        index: 0,
        kind: "method",
        name: "at",
        static: false,
      },
      {
        index: 0,
        kind: "method",
        name: "toString",
        static: false,
      },
    ],
    name: "Range",
    url: "https://jsr.io/@hongminhee/aitertools@0.6.0/doc/~/Range",
  },
}
`;
