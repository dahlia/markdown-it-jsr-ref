{"package":"@logtape/logtape","version":"0.8.2","index":{"AnsiColor":{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"AnsiColor","file":".","doc":"The ANSI colors.  These can be used to colorize text in the console.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColor","deprecated":false,"label":"AnsiColor"},"AnsiColorFormatterOptions":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"AnsiColorFormatterOptions","file":".","doc":"The various options for the ANSI color formatter.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions","deprecated":false,"label":"AnsiColorFormatterOptions"},"AnsiColorFormatterOptions.timestamp":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.timestamp","file":".","doc":"The timestamp format.  This can be one of the following:\n\n- `\"date-time-timezone\"`: The date and time with the full timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000 +00:00\"`).\n- `\"date-time-tz\"`: The date and time with the short timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000 +00\"`).\n- `\"date-time\"`: The date and time without the timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000\"`).\n- `\"time-timezone\"`: The time with the full timezone offset but without\n  the date (e.g., `\"22:13:20.000 +00:00\"`).\n- `\"time-tz\"`: The time with the short timezone offset but without the date\n  (e.g., `\"22:13:20.000 +00\"`).\n- `\"time\"`: The time without the date or timezone offset\n  (e.g., `\"22:13:20.000\"`).\n- `\"date\"`: The date without the time or timezone offset\n  (e.g., `\"2023-11-14\"`).\n- `\"rfc3339\"`: The date and time in RFC 3339 format\n  (e.g., `\"2023-11-14T22:13:20.000Z\"`).\n\nAlternatively, this can be a function that accepts a timestamp and returns\na string.\n\nThe default is `\"date-time-tz\"`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.timestamp","deprecated":false,"label":"AnsiColorFormatterOptions.timestamp"},"~AnsiColorFormatterOptions.timestamp":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.timestamp","file":".","doc":"The timestamp format.  This can be one of the following:\n\n- `\"date-time-timezone\"`: The date and time with the full timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000 +00:00\"`).\n- `\"date-time-tz\"`: The date and time with the short timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000 +00\"`).\n- `\"date-time\"`: The date and time without the timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000\"`).\n- `\"time-timezone\"`: The time with the full timezone offset but without\n  the date (e.g., `\"22:13:20.000 +00:00\"`).\n- `\"time-tz\"`: The time with the short timezone offset but without the date\n  (e.g., `\"22:13:20.000 +00\"`).\n- `\"time\"`: The time without the date or timezone offset\n  (e.g., `\"22:13:20.000\"`).\n- `\"date\"`: The date without the time or timezone offset\n  (e.g., `\"2023-11-14\"`).\n- `\"rfc3339\"`: The date and time in RFC 3339 format\n  (e.g., `\"2023-11-14T22:13:20.000Z\"`).\n\nAlternatively, this can be a function that accepts a timestamp and returns\na string.\n\nThe default is `\"date-time-tz\"`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.timestamp","deprecated":false,"label":"timestamp"},"AnsiColorFormatterOptions.timestampStyle":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.timestampStyle","file":".","doc":"The ANSI style for the timestamp.  `\"dim\"` is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.timestampStyle","deprecated":false,"label":"AnsiColorFormatterOptions.timestampStyle"},"~AnsiColorFormatterOptions.timestampStyle":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.timestampStyle","file":".","doc":"The ANSI style for the timestamp.  `\"dim\"` is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.timestampStyle","deprecated":false,"label":"timestampStyle"},"AnsiColorFormatterOptions.timestampColor":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.timestampColor","file":".","doc":"The ANSI color for the timestamp.  No color is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.timestampColor","deprecated":false,"label":"AnsiColorFormatterOptions.timestampColor"},"~AnsiColorFormatterOptions.timestampColor":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.timestampColor","file":".","doc":"The ANSI color for the timestamp.  No color is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.timestampColor","deprecated":false,"label":"timestampColor"},"AnsiColorFormatterOptions.levelStyle":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.levelStyle","file":".","doc":"The ANSI style for the log level.  `\"bold\"` is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.levelStyle","deprecated":false,"label":"AnsiColorFormatterOptions.levelStyle"},"~AnsiColorFormatterOptions.levelStyle":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.levelStyle","file":".","doc":"The ANSI style for the log level.  `\"bold\"` is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.levelStyle","deprecated":false,"label":"levelStyle"},"AnsiColorFormatterOptions.levelColors":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.levelColors","file":".","doc":"The ANSI colors for the log levels.  The default colors are as follows:\n\n- `\"debug\"`: `\"blue\"`\n- `\"info\"`: `\"green\"`\n- `\"warning\"`: `\"yellow\"`\n- `\"error\"`: `\"red\"`\n- `\"fatal\"`: `\"magenta\"`","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.levelColors","deprecated":false,"label":"AnsiColorFormatterOptions.levelColors"},"~AnsiColorFormatterOptions.levelColors":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.levelColors","file":".","doc":"The ANSI colors for the log levels.  The default colors are as follows:\n\n- `\"debug\"`: `\"blue\"`\n- `\"info\"`: `\"green\"`\n- `\"warning\"`: `\"yellow\"`\n- `\"error\"`: `\"red\"`\n- `\"fatal\"`: `\"magenta\"`","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.levelColors","deprecated":false,"label":"levelColors"},"AnsiColorFormatterOptions.categoryStyle":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.categoryStyle","file":".","doc":"The ANSI style for the category.  `\"dim\"` is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.categoryStyle","deprecated":false,"label":"AnsiColorFormatterOptions.categoryStyle"},"~AnsiColorFormatterOptions.categoryStyle":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.categoryStyle","file":".","doc":"The ANSI style for the category.  `\"dim\"` is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.categoryStyle","deprecated":false,"label":"categoryStyle"},"AnsiColorFormatterOptions.categoryColor":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.categoryColor","file":".","doc":"The ANSI color for the category.  No color is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.categoryColor","deprecated":false,"label":"AnsiColorFormatterOptions.categoryColor"},"~AnsiColorFormatterOptions.categoryColor":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"AnsiColorFormatterOptions.categoryColor","file":".","doc":"The ANSI color for the category.  No color is used by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiColorFormatterOptions.categoryColor","deprecated":false,"label":"categoryColor"},"AnsiStyle":{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"AnsiStyle","file":".","doc":"The ANSI text styles.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/AnsiStyle","deprecated":false,"label":"AnsiStyle"},"Config":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"Config","file":".","doc":"A configuration for the loggers.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config","deprecated":false,"label":"Config"},"Config.sinks":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.sinks","file":".","doc":"The sinks to use.  The keys are the sink identifiers, and the values are\n{@link Sink}s.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.sinks","deprecated":false,"label":"Config.sinks"},"~Config.sinks":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.sinks","file":".","doc":"The sinks to use.  The keys are the sink identifiers, and the values are\n{@link Sink}s.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.sinks","deprecated":false,"label":"sinks"},"Config.filters":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.filters","file":".","doc":"The filters to use.  The keys are the filter identifiers, and the values\nare either {@link Filter}s or {@link LogLevel}s.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.filters","deprecated":false,"label":"Config.filters"},"~Config.filters":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.filters","file":".","doc":"The filters to use.  The keys are the filter identifiers, and the values\nare either {@link Filter}s or {@link LogLevel}s.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.filters","deprecated":false,"label":"filters"},"Config.loggers":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.loggers","file":".","doc":"The loggers to configure.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.loggers","deprecated":false,"label":"Config.loggers"},"~Config.loggers":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.loggers","file":".","doc":"The loggers to configure.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.loggers","deprecated":false,"label":"loggers"},"Config.contextLocalStorage":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.contextLocalStorage","file":".","doc":"The context-local storage to use for implicit contexts.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.contextLocalStorage","deprecated":false,"label":"Config.contextLocalStorage"},"~Config.contextLocalStorage":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.contextLocalStorage","file":".","doc":"The context-local storage to use for implicit contexts.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.contextLocalStorage","deprecated":false,"label":"contextLocalStorage"},"Config.reset":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.reset","file":".","doc":"Whether to reset the configuration before applying this one.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.reset","deprecated":false,"label":"Config.reset"},"~Config.reset":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Config.reset","file":".","doc":"Whether to reset the configuration before applying this one.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Config.reset","deprecated":false,"label":"reset"},"ConfigError":{"kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"ConfigError","file":".","doc":"A configuration error.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ConfigError","deprecated":false,"label":"ConfigError"},"new ConfigError":{"kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"ConfigError","file":".","doc":"A configuration error.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ConfigError#constructors","deprecated":false,"label":"new ConfigError"},"new ConfigError()":{"kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"ConfigError","file":".","doc":"A configuration error.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ConfigError#constructors","deprecated":false,"label":"new ConfigError"},"ConsoleFormatter":{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"ConsoleFormatter","file":".","doc":"A console formatter is a function that accepts a log record and returns\nan array of arguments to pass to {@link console.log}.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ConsoleFormatter","deprecated":false,"label":"ConsoleFormatter"},"ConsoleSinkOptions":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"ConsoleSinkOptions","file":".","doc":"Options for the {@link getConsoleSink} function.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ConsoleSinkOptions","deprecated":false,"label":"ConsoleSinkOptions"},"ConsoleSinkOptions.formatter":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ConsoleSinkOptions.formatter","file":".","doc":"The console formatter or text formatter to use.\nDefaults to {@link defaultConsoleFormatter}.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ConsoleSinkOptions.formatter","deprecated":false,"label":"ConsoleSinkOptions.formatter"},"~ConsoleSinkOptions.formatter":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ConsoleSinkOptions.formatter","file":".","doc":"The console formatter or text formatter to use.\nDefaults to {@link defaultConsoleFormatter}.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ConsoleSinkOptions.formatter","deprecated":false,"label":"formatter"},"ConsoleSinkOptions.console":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ConsoleSinkOptions.console","file":".","doc":"The console to log to.  Defaults to {@link console}.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ConsoleSinkOptions.console","deprecated":false,"label":"ConsoleSinkOptions.console"},"~ConsoleSinkOptions.console":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ConsoleSinkOptions.console","file":".","doc":"The console to log to.  Defaults to {@link console}.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ConsoleSinkOptions.console","deprecated":false,"label":"console"},"ContextLocalStorage":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"ContextLocalStorage","file":".","doc":"A generic interface for a context-local storage.  It resembles\nthe {@link AsyncLocalStorage} API from Node.js.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ContextLocalStorage","deprecated":false,"label":"ContextLocalStorage"},"ContextLocalStorage.run()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ContextLocalStorage.run","file":".","doc":"Runs a callback with the given store as the context-local store.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ContextLocalStorage.run","deprecated":false,"label":"ContextLocalStorage.run()"},"~ContextLocalStorage.run()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ContextLocalStorage.run","file":".","doc":"Runs a callback with the given store as the context-local store.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ContextLocalStorage.run","deprecated":false,"label":"run()"},"ContextLocalStorage.run":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ContextLocalStorage.run","file":".","doc":"Runs a callback with the given store as the context-local store.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ContextLocalStorage.run","deprecated":false,"label":"ContextLocalStorage.run"},"~ContextLocalStorage.run":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ContextLocalStorage.run","file":".","doc":"Runs a callback with the given store as the context-local store.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ContextLocalStorage.run","deprecated":false,"label":"run"},"ContextLocalStorage.getStore()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ContextLocalStorage.getStore","file":".","doc":"Returns the current context-local store.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ContextLocalStorage.getStore","deprecated":false,"label":"ContextLocalStorage.getStore()"},"~ContextLocalStorage.getStore()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ContextLocalStorage.getStore","file":".","doc":"Returns the current context-local store.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ContextLocalStorage.getStore","deprecated":false,"label":"getStore()"},"ContextLocalStorage.getStore":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ContextLocalStorage.getStore","file":".","doc":"Returns the current context-local store.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ContextLocalStorage.getStore","deprecated":false,"label":"ContextLocalStorage.getStore"},"~ContextLocalStorage.getStore":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"ContextLocalStorage.getStore","file":".","doc":"Returns the current context-local store.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ContextLocalStorage.getStore","deprecated":false,"label":"getStore"},"FileSinkOptions":{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"FileSinkOptions","file":".","doc":"Options for the {@link getFileSink} function.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FileSinkOptions","deprecated":false,"label":"FileSinkOptions"},"Filter":{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Filter","file":".","doc":"A filter is a function that accepts a log record and returns `true` if the\nrecord should be passed to the sink.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Filter","deprecated":false,"label":"Filter"},"FilterLike":{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"FilterLike","file":".","doc":"A filter-like value is either a {@link Filter} or a {@link LogLevel}.\n`null` is also allowed to represent a filter that rejects all records.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FilterLike","deprecated":false,"label":"FilterLike"},"FormattedValues":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"FormattedValues","file":".","doc":"The formatted values for a log record.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues","deprecated":false,"label":"FormattedValues"},"FormattedValues.timestamp":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.timestamp","file":".","doc":"The formatted timestamp.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.timestamp","deprecated":false,"label":"FormattedValues.timestamp"},"~FormattedValues.timestamp":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.timestamp","file":".","doc":"The formatted timestamp.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.timestamp","deprecated":false,"label":"timestamp"},"FormattedValues.level":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.level","file":".","doc":"The formatted log level.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.level","deprecated":false,"label":"FormattedValues.level"},"~FormattedValues.level":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.level","file":".","doc":"The formatted log level.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.level","deprecated":false,"label":"level"},"FormattedValues.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.category","file":".","doc":"The formatted category.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.category","deprecated":false,"label":"FormattedValues.category"},"~FormattedValues.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.category","file":".","doc":"The formatted category.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.category","deprecated":false,"label":"category"},"FormattedValues.message":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.message","file":".","doc":"The formatted message.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.message","deprecated":false,"label":"FormattedValues.message"},"~FormattedValues.message":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.message","file":".","doc":"The formatted message.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.message","deprecated":false,"label":"message"},"FormattedValues.record":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.record","file":".","doc":"The unformatted log record.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.record","deprecated":false,"label":"FormattedValues.record"},"~FormattedValues.record":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"FormattedValues.record","file":".","doc":"The unformatted log record.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/FormattedValues.record","deprecated":false,"label":"record"},"LogLevel":{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"LogLevel","file":".","doc":"The severity level of a {@link LogRecord}.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogLevel","deprecated":false,"label":"LogLevel"},"LogRecord":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"LogRecord","file":".","doc":"A log record.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord","deprecated":false,"label":"LogRecord"},"LogRecord.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.category","file":".","doc":"The category of the logger that produced the log record.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.category","deprecated":false,"label":"LogRecord.category"},"~LogRecord.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.category","file":".","doc":"The category of the logger that produced the log record.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.category","deprecated":false,"label":"category"},"LogRecord.level":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.level","file":".","doc":"The log level.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.level","deprecated":false,"label":"LogRecord.level"},"~LogRecord.level":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.level","file":".","doc":"The log level.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.level","deprecated":false,"label":"level"},"LogRecord.message":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.message","file":".","doc":"The log message.  This is the result of substituting the message template\nwith the values.  The number of elements in this array is always odd,\nwith the message template values interleaved between the substitution\nvalues.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.message","deprecated":false,"label":"LogRecord.message"},"~LogRecord.message":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.message","file":".","doc":"The log message.  This is the result of substituting the message template\nwith the values.  The number of elements in this array is always odd,\nwith the message template values interleaved between the substitution\nvalues.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.message","deprecated":false,"label":"message"},"LogRecord.rawMessage":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.rawMessage","file":".","doc":"The raw log message.  This is the original message template without any\nfurther processing.  It can be either:\n\n- A string without any substitutions if the log record was created with\n  a method call syntax, e.g., \"Hello, {name}!\" for\n  `logger.info(\"Hello, {name}!\", { name })`.\n- A template string array if the log record was created with a tagged\n  template literal syntax, e.g., `[\"Hello, \", \"!\"]` for\n  ``logger.info`Hello, ${name}!```.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.rawMessage","deprecated":false,"label":"LogRecord.rawMessage"},"~LogRecord.rawMessage":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.rawMessage","file":".","doc":"The raw log message.  This is the original message template without any\nfurther processing.  It can be either:\n\n- A string without any substitutions if the log record was created with\n  a method call syntax, e.g., \"Hello, {name}!\" for\n  `logger.info(\"Hello, {name}!\", { name })`.\n- A template string array if the log record was created with a tagged\n  template literal syntax, e.g., `[\"Hello, \", \"!\"]` for\n  ``logger.info`Hello, ${name}!```.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.rawMessage","deprecated":false,"label":"rawMessage"},"LogRecord.timestamp":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.timestamp","file":".","doc":"The timestamp of the log record in milliseconds since the Unix epoch.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.timestamp","deprecated":false,"label":"LogRecord.timestamp"},"~LogRecord.timestamp":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.timestamp","file":".","doc":"The timestamp of the log record in milliseconds since the Unix epoch.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.timestamp","deprecated":false,"label":"timestamp"},"LogRecord.properties":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.properties","file":".","doc":"The extra properties of the log record.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.properties","deprecated":false,"label":"LogRecord.properties"},"~LogRecord.properties":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LogRecord.properties","file":".","doc":"The extra properties of the log record.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LogRecord.properties","deprecated":false,"label":"properties"},"Logger":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"Logger","file":".","doc":"A logger interface.  It provides methods to log messages at different\nseverity levels.\n\n```typescript\nconst logger = getLogger(\"category\");\nlogger.debug `A debug message with ${value}.`;\nlogger.info `An info message with ${value}.`;\nlogger.warn `A warning message with ${value}.`;\nlogger.error `An error message with ${value}.`;\nlogger.fatal `A fatal error message with ${value}.`;\n```","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger","deprecated":false,"label":"Logger"},"Logger.getChild()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.getChild","file":".","doc":"Get a child logger with the given subcategory.\n\n```typescript\nconst logger = getLogger(\"category\");\nconst subLogger = logger.getChild(\"sub-category\");\n```\n\nThe above code is equivalent to:\n\n```typescript\nconst logger = getLogger(\"category\");\nconst subLogger = getLogger([\"category\", \"sub-category\"]);\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.getChild","deprecated":false,"label":"Logger.getChild()"},"~Logger.getChild()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.getChild","file":".","doc":"Get a child logger with the given subcategory.\n\n```typescript\nconst logger = getLogger(\"category\");\nconst subLogger = logger.getChild(\"sub-category\");\n```\n\nThe above code is equivalent to:\n\n```typescript\nconst logger = getLogger(\"category\");\nconst subLogger = getLogger([\"category\", \"sub-category\"]);\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.getChild","deprecated":false,"label":"getChild()"},"Logger.getChild":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.getChild","file":".","doc":"Get a child logger with the given subcategory.\n\n```typescript\nconst logger = getLogger(\"category\");\nconst subLogger = logger.getChild(\"sub-category\");\n```\n\nThe above code is equivalent to:\n\n```typescript\nconst logger = getLogger(\"category\");\nconst subLogger = getLogger([\"category\", \"sub-category\"]);\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.getChild","deprecated":false,"label":"Logger.getChild"},"~Logger.getChild":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.getChild","file":".","doc":"Get a child logger with the given subcategory.\n\n```typescript\nconst logger = getLogger(\"category\");\nconst subLogger = logger.getChild(\"sub-category\");\n```\n\nThe above code is equivalent to:\n\n```typescript\nconst logger = getLogger(\"category\");\nconst subLogger = getLogger([\"category\", \"sub-category\"]);\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.getChild","deprecated":false,"label":"getChild"},"Logger.with()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.with","file":".","doc":"Get a logger with contextual properties.  This is useful for\nlog multiple messages with the shared set of properties.\n\n```typescript\nconst logger = getLogger(\"category\");\nconst ctx = logger.with({ foo: 123, bar: \"abc\" });\nctx.info(\"A message with {foo} and {bar}.\");\nctx.warn(\"Another message with {foo}, {bar}, and {baz}.\", { baz: true });\n```\n\nThe above code is equivalent to:\n\n```typescript\nconst logger = getLogger(\"category\");\nlogger.info(\"A message with {foo} and {bar}.\", { foo: 123, bar: \"abc\" });\nlogger.warn(\n  \"Another message with {foo}, {bar}, and {baz}.\",\n  { foo: 123, bar: \"abc\", baz: true },\n);\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.with","deprecated":false,"label":"Logger.with()"},"~Logger.with()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.with","file":".","doc":"Get a logger with contextual properties.  This is useful for\nlog multiple messages with the shared set of properties.\n\n```typescript\nconst logger = getLogger(\"category\");\nconst ctx = logger.with({ foo: 123, bar: \"abc\" });\nctx.info(\"A message with {foo} and {bar}.\");\nctx.warn(\"Another message with {foo}, {bar}, and {baz}.\", { baz: true });\n```\n\nThe above code is equivalent to:\n\n```typescript\nconst logger = getLogger(\"category\");\nlogger.info(\"A message with {foo} and {bar}.\", { foo: 123, bar: \"abc\" });\nlogger.warn(\n  \"Another message with {foo}, {bar}, and {baz}.\",\n  { foo: 123, bar: \"abc\", baz: true },\n);\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.with","deprecated":false,"label":"with()"},"Logger.with":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.with","file":".","doc":"Get a logger with contextual properties.  This is useful for\nlog multiple messages with the shared set of properties.\n\n```typescript\nconst logger = getLogger(\"category\");\nconst ctx = logger.with({ foo: 123, bar: \"abc\" });\nctx.info(\"A message with {foo} and {bar}.\");\nctx.warn(\"Another message with {foo}, {bar}, and {baz}.\", { baz: true });\n```\n\nThe above code is equivalent to:\n\n```typescript\nconst logger = getLogger(\"category\");\nlogger.info(\"A message with {foo} and {bar}.\", { foo: 123, bar: \"abc\" });\nlogger.warn(\n  \"Another message with {foo}, {bar}, and {baz}.\",\n  { foo: 123, bar: \"abc\", baz: true },\n);\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.with","deprecated":false,"label":"Logger.with"},"~Logger.with":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.with","file":".","doc":"Get a logger with contextual properties.  This is useful for\nlog multiple messages with the shared set of properties.\n\n```typescript\nconst logger = getLogger(\"category\");\nconst ctx = logger.with({ foo: 123, bar: \"abc\" });\nctx.info(\"A message with {foo} and {bar}.\");\nctx.warn(\"Another message with {foo}, {bar}, and {baz}.\", { baz: true });\n```\n\nThe above code is equivalent to:\n\n```typescript\nconst logger = getLogger(\"category\");\nlogger.info(\"A message with {foo} and {bar}.\", { foo: 123, bar: \"abc\" });\nlogger.warn(\n  \"Another message with {foo}, {bar}, and {baz}.\",\n  { foo: 123, bar: \"abc\", baz: true },\n);\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.with","deprecated":false,"label":"with"},"Logger.debug()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.debug","file":".","doc":"Log a debug message.  Use this as a template string prefix.\n\n```typescript\nlogger.debug `A debug message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.debug","deprecated":false,"label":"Logger.debug()"},"~Logger.debug()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.debug","file":".","doc":"Log a debug message.  Use this as a template string prefix.\n\n```typescript\nlogger.debug `A debug message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.debug","deprecated":false,"label":"debug()"},"Logger.debug":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.debug","file":".","doc":"Log a debug message.  Use this as a template string prefix.\n\n```typescript\nlogger.debug `A debug message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.debug","deprecated":false,"label":"Logger.debug"},"~Logger.debug":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.debug","file":".","doc":"Log a debug message.  Use this as a template string prefix.\n\n```typescript\nlogger.debug `A debug message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.debug","deprecated":false,"label":"debug"},"Logger.info()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.info","file":".","doc":"Log an informational message.  Use this as a template string prefix.\n\n```typescript\nlogger.info `An info message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.info","deprecated":false,"label":"Logger.info()"},"~Logger.info()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.info","file":".","doc":"Log an informational message.  Use this as a template string prefix.\n\n```typescript\nlogger.info `An info message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.info","deprecated":false,"label":"info()"},"Logger.info":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.info","file":".","doc":"Log an informational message.  Use this as a template string prefix.\n\n```typescript\nlogger.info `An info message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.info","deprecated":false,"label":"Logger.info"},"~Logger.info":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.info","file":".","doc":"Log an informational message.  Use this as a template string prefix.\n\n```typescript\nlogger.info `An info message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.info","deprecated":false,"label":"info"},"Logger.warn()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.warn","file":".","doc":"Log a warning message.  Use this as a template string prefix.\n\n```typescript\nlogger.warn `A warning message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.warn","deprecated":false,"label":"Logger.warn()"},"~Logger.warn()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.warn","file":".","doc":"Log a warning message.  Use this as a template string prefix.\n\n```typescript\nlogger.warn `A warning message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.warn","deprecated":false,"label":"warn()"},"Logger.warn":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.warn","file":".","doc":"Log a warning message.  Use this as a template string prefix.\n\n```typescript\nlogger.warn `A warning message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.warn","deprecated":false,"label":"Logger.warn"},"~Logger.warn":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.warn","file":".","doc":"Log a warning message.  Use this as a template string prefix.\n\n```typescript\nlogger.warn `A warning message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.warn","deprecated":false,"label":"warn"},"Logger.error()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.error","file":".","doc":"Log an error message.  Use this as a template string prefix.\n\n```typescript\nlogger.error `An error message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.error","deprecated":false,"label":"Logger.error()"},"~Logger.error()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.error","file":".","doc":"Log an error message.  Use this as a template string prefix.\n\n```typescript\nlogger.error `An error message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.error","deprecated":false,"label":"error()"},"Logger.error":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.error","file":".","doc":"Log an error message.  Use this as a template string prefix.\n\n```typescript\nlogger.error `An error message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.error","deprecated":false,"label":"Logger.error"},"~Logger.error":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.error","file":".","doc":"Log an error message.  Use this as a template string prefix.\n\n```typescript\nlogger.error `An error message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.error","deprecated":false,"label":"error"},"Logger.fatal()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.fatal","file":".","doc":"Log a fatal error message.  Use this as a template string prefix.\n\n```typescript\nlogger.fatal `A fatal error message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.fatal","deprecated":false,"label":"Logger.fatal()"},"~Logger.fatal()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.fatal","file":".","doc":"Log a fatal error message.  Use this as a template string prefix.\n\n```typescript\nlogger.fatal `A fatal error message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.fatal","deprecated":false,"label":"fatal()"},"Logger.fatal":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.fatal","file":".","doc":"Log a fatal error message.  Use this as a template string prefix.\n\n```typescript\nlogger.fatal `A fatal error message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.fatal","deprecated":false,"label":"Logger.fatal"},"~Logger.fatal":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Logger.fatal","file":".","doc":"Log a fatal error message.  Use this as a template string prefix.\n\n```typescript\nlogger.fatal `A fatal error message with ${value}.`;\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.fatal","deprecated":false,"label":"fatal"},"Logger.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Logger.category","file":".","doc":"The category of the logger.  It is an array of strings.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.category","deprecated":false,"label":"Logger.category"},"~Logger.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Logger.category","file":".","doc":"The category of the logger.  It is an array of strings.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.category","deprecated":false,"label":"category"},"Logger.parent":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Logger.parent","file":".","doc":"The logger with the supercategory of the current logger.  If the current\nlogger is the root logger, this is `null`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.parent","deprecated":false,"label":"Logger.parent"},"~Logger.parent":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Logger.parent","file":".","doc":"The logger with the supercategory of the current logger.  If the current\nlogger is the root logger, this is `null`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Logger.parent","deprecated":false,"label":"parent"},"LoggerConfig":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"LoggerConfig","file":".","doc":"A logger configuration.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig","deprecated":false,"label":"LoggerConfig"},"LoggerConfig.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.category","file":".","doc":"The category of the logger.  If a string, it is equivalent to an array\nwith one element.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.category","deprecated":false,"label":"LoggerConfig.category"},"~LoggerConfig.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.category","file":".","doc":"The category of the logger.  If a string, it is equivalent to an array\nwith one element.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.category","deprecated":false,"label":"category"},"LoggerConfig.sinks":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.sinks","file":".","doc":"The sink identifiers to use.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.sinks","deprecated":false,"label":"LoggerConfig.sinks"},"~LoggerConfig.sinks":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.sinks","file":".","doc":"The sink identifiers to use.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.sinks","deprecated":false,"label":"sinks"},"LoggerConfig.parentSinks":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.parentSinks","file":".","doc":"Whether to inherit the parent's sinks.  If `inherit`, the parent's sinks\nare used along with the specified sinks.  If `override`, the parent's\nsinks are not used, and only the specified sinks are used.\n\nThe default is `inherit`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.parentSinks","deprecated":false,"label":"LoggerConfig.parentSinks"},"~LoggerConfig.parentSinks":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.parentSinks","file":".","doc":"Whether to inherit the parent's sinks.  If `inherit`, the parent's sinks\nare used along with the specified sinks.  If `override`, the parent's\nsinks are not used, and only the specified sinks are used.\n\nThe default is `inherit`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.parentSinks","deprecated":false,"label":"parentSinks"},"LoggerConfig.filters":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.filters","file":".","doc":"The filter identifiers to use.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.filters","deprecated":false,"label":"LoggerConfig.filters"},"~LoggerConfig.filters":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.filters","file":".","doc":"The filter identifiers to use.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.filters","deprecated":false,"label":"filters"},"LoggerConfig.level":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.level","file":".","doc":"The log level to filter by.  If `null`, the logger will reject all\nrecords.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.level","deprecated":true,"label":"LoggerConfig.level"},"~LoggerConfig.level":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.level","file":".","doc":"The log level to filter by.  If `null`, the logger will reject all\nrecords.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.level","deprecated":true,"label":"level"},"LoggerConfig.lowestLevel":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.lowestLevel","file":".","doc":"The lowest log level to accept.  If `null`, the logger will reject all\nrecords.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.lowestLevel","deprecated":false,"label":"LoggerConfig.lowestLevel"},"~LoggerConfig.lowestLevel":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"LoggerConfig.lowestLevel","file":".","doc":"The lowest log level to accept.  If `null`, the logger will reject all\nrecords.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/LoggerConfig.lowestLevel","deprecated":false,"label":"lowestLevel"},"RotatingFileSinkOptions":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"RotatingFileSinkOptions","file":".","doc":"Options for the {@link getRotatingFileSink} function.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/RotatingFileSinkOptions","deprecated":false,"label":"RotatingFileSinkOptions"},"RotatingFileSinkOptions.maxSize":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"RotatingFileSinkOptions.maxSize","file":".","doc":"The maximum bytes of the file before it is rotated.  1 MiB by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/RotatingFileSinkOptions.maxSize","deprecated":false,"label":"RotatingFileSinkOptions.maxSize"},"~RotatingFileSinkOptions.maxSize":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"RotatingFileSinkOptions.maxSize","file":".","doc":"The maximum bytes of the file before it is rotated.  1 MiB by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/RotatingFileSinkOptions.maxSize","deprecated":false,"label":"maxSize"},"RotatingFileSinkOptions.maxFiles":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"RotatingFileSinkOptions.maxFiles","file":".","doc":"The maximum number of files to keep.  5 by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/RotatingFileSinkOptions.maxFiles","deprecated":false,"label":"RotatingFileSinkOptions.maxFiles"},"~RotatingFileSinkOptions.maxFiles":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"RotatingFileSinkOptions.maxFiles","file":".","doc":"The maximum number of files to keep.  5 by default.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/RotatingFileSinkOptions.maxFiles","deprecated":false,"label":"maxFiles"},"Sink":{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Sink","file":".","doc":"A sink is a function that accepts a log record and prints it somewhere.\nThrown exceptions will be suppressed and then logged to the meta logger,\na {@link Logger} with the category `[\"logtape\", \"meta\"]`.  (In that case,\nthe meta log record will not be passed to the sink to avoid infinite\nrecursion.)\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/Sink","deprecated":false,"label":"Sink"},"StreamSinkOptions":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"StreamSinkOptions","file":".","doc":"Options for the {@link getStreamSink} function.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/StreamSinkOptions","deprecated":false,"label":"StreamSinkOptions"},"StreamSinkOptions.formatter":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"StreamSinkOptions.formatter","file":".","doc":"The text formatter to use.  Defaults to {@link defaultTextFormatter}.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/StreamSinkOptions.formatter","deprecated":false,"label":"StreamSinkOptions.formatter"},"~StreamSinkOptions.formatter":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"StreamSinkOptions.formatter","file":".","doc":"The text formatter to use.  Defaults to {@link defaultTextFormatter}.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/StreamSinkOptions.formatter","deprecated":false,"label":"formatter"},"StreamSinkOptions.encoder":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"StreamSinkOptions.encoder","file":".","doc":"The text encoder to use.  Defaults to an instance of {@link TextEncoder}.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/StreamSinkOptions.encoder","deprecated":false,"label":"StreamSinkOptions.encoder"},"~StreamSinkOptions.encoder":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"StreamSinkOptions.encoder","file":".","doc":"The text encoder to use.  Defaults to an instance of {@link TextEncoder}.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/StreamSinkOptions.encoder","deprecated":false,"label":"encoder"},"StreamSinkOptions.encoder.encode()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"StreamSinkOptions.encoder.encode","file":".","doc":"","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/StreamSinkOptions.encoder.encode","deprecated":false,"label":"StreamSinkOptions.encoder.encode()"},"~StreamSinkOptions.encoder.encode()":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"StreamSinkOptions.encoder.encode","file":".","doc":"","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/StreamSinkOptions.encoder.encode","deprecated":false,"label":"encoder.encode()"},"StreamSinkOptions.encoder.encode":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"StreamSinkOptions.encoder.encode","file":".","doc":"","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/StreamSinkOptions.encoder.encode","deprecated":false,"label":"StreamSinkOptions.encoder.encode"},"~StreamSinkOptions.encoder.encode":{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"StreamSinkOptions.encoder.encode","file":".","doc":"","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/StreamSinkOptions.encoder.encode","deprecated":false,"label":"encoder.encode"},"TextFormatter":{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TextFormatter","file":".","doc":"A text formatter is a function that accepts a log record and returns\na string.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatter","deprecated":false,"label":"TextFormatter"},"TextFormatterOptions":{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"TextFormatterOptions","file":".","doc":"The various options for the built-in text formatters.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions","deprecated":false,"label":"TextFormatterOptions"},"TextFormatterOptions.timestamp":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.timestamp","file":".","doc":"The timestamp format.  This can be one of the following:\n\n- `\"date-time-timezone\"`: The date and time with the full timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000 +00:00\"`).\n- `\"date-time-tz\"`: The date and time with the short timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000 +00\"`).\n- `\"date-time\"`: The date and time without the timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000\"`).\n- `\"time-timezone\"`: The time with the full timezone offset but without\n  the date (e.g., `\"22:13:20.000 +00:00\"`).\n- `\"time-tz\"`: The time with the short timezone offset but without the date\n  (e.g., `\"22:13:20.000 +00\"`).\n- `\"time\"`: The time without the date or timezone offset\n  (e.g., `\"22:13:20.000\"`).\n- `\"date\"`: The date without the time or timezone offset\n  (e.g., `\"2023-11-14\"`).\n- `\"rfc3339\"`: The date and time in RFC 3339 format\n  (e.g., `\"2023-11-14T22:13:20.000Z\"`).\n\nAlternatively, this can be a function that accepts a timestamp and returns\na string.\n\nThe default is `\"date-time-timezone\"`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.timestamp","deprecated":false,"label":"TextFormatterOptions.timestamp"},"~TextFormatterOptions.timestamp":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.timestamp","file":".","doc":"The timestamp format.  This can be one of the following:\n\n- `\"date-time-timezone\"`: The date and time with the full timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000 +00:00\"`).\n- `\"date-time-tz\"`: The date and time with the short timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000 +00\"`).\n- `\"date-time\"`: The date and time without the timezone offset\n  (e.g., `\"2023-11-14 22:13:20.000\"`).\n- `\"time-timezone\"`: The time with the full timezone offset but without\n  the date (e.g., `\"22:13:20.000 +00:00\"`).\n- `\"time-tz\"`: The time with the short timezone offset but without the date\n  (e.g., `\"22:13:20.000 +00\"`).\n- `\"time\"`: The time without the date or timezone offset\n  (e.g., `\"22:13:20.000\"`).\n- `\"date\"`: The date without the time or timezone offset\n  (e.g., `\"2023-11-14\"`).\n- `\"rfc3339\"`: The date and time in RFC 3339 format\n  (e.g., `\"2023-11-14T22:13:20.000Z\"`).\n\nAlternatively, this can be a function that accepts a timestamp and returns\na string.\n\nThe default is `\"date-time-timezone\"`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.timestamp","deprecated":false,"label":"timestamp"},"TextFormatterOptions.level":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.level","file":".","doc":"The log level format.  This can be one of the following:\n\n- `\"ABBR\"`: The log level abbreviation in uppercase (e.g., `\"INF\"`).\n- `\"FULL\"`: The full log level name in uppercase (e.g., `\"INFO\"`).\n- `\"L\"`: The first letter of the log level in uppercase (e.g., `\"I\"`).\n- `\"abbr\"`: The log level abbreviation in lowercase (e.g., `\"inf\"`).\n- `\"full\"`: The full log level name in lowercase (e.g., `\"info\"`).\n- `\"l\"`: The first letter of the log level in lowercase (e.g., `\"i\"`).\n\nAlternatively, this can be a function that accepts a log level and returns\na string.\n\nThe default is `\"ABBR\"`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.level","deprecated":false,"label":"TextFormatterOptions.level"},"~TextFormatterOptions.level":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.level","file":".","doc":"The log level format.  This can be one of the following:\n\n- `\"ABBR\"`: The log level abbreviation in uppercase (e.g., `\"INF\"`).\n- `\"FULL\"`: The full log level name in uppercase (e.g., `\"INFO\"`).\n- `\"L\"`: The first letter of the log level in uppercase (e.g., `\"I\"`).\n- `\"abbr\"`: The log level abbreviation in lowercase (e.g., `\"inf\"`).\n- `\"full\"`: The full log level name in lowercase (e.g., `\"info\"`).\n- `\"l\"`: The first letter of the log level in lowercase (e.g., `\"i\"`).\n\nAlternatively, this can be a function that accepts a log level and returns\na string.\n\nThe default is `\"ABBR\"`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.level","deprecated":false,"label":"level"},"TextFormatterOptions.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.category","file":".","doc":"The separator between category names.  For example, if the separator is\n`\"·\"`, the category `[\"a\", \"b\", \"c\"]` will be formatted as `\"a·b·c\"`.\nThe default separator is `\"·\"`.\n\nIf this is a function, it will be called with the category array and\nshould return a string, which will be used for rendering the category.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.category","deprecated":false,"label":"TextFormatterOptions.category"},"~TextFormatterOptions.category":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.category","file":".","doc":"The separator between category names.  For example, if the separator is\n`\"·\"`, the category `[\"a\", \"b\", \"c\"]` will be formatted as `\"a·b·c\"`.\nThe default separator is `\"·\"`.\n\nIf this is a function, it will be called with the category array and\nshould return a string, which will be used for rendering the category.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.category","deprecated":false,"label":"category"},"TextFormatterOptions.value":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.value","file":".","doc":"The format of the embedded values.\n\nA function that renders a value to a string.  This function is used to\nrender the values in the log record.  The default is [`util.inspect()`] in\nNode.js/Bun and [`Deno.inspect()`] in Deno.\n\n[`util.inspect()`]: https://nodejs.org/api/util.html#utilinspectobject-options\n[`Deno.inspect()`]: https://docs.deno.com/api/deno/~/Deno.inspect","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.value","deprecated":false,"label":"TextFormatterOptions.value"},"~TextFormatterOptions.value":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.value","file":".","doc":"The format of the embedded values.\n\nA function that renders a value to a string.  This function is used to\nrender the values in the log record.  The default is [`util.inspect()`] in\nNode.js/Bun and [`Deno.inspect()`] in Deno.\n\n[`util.inspect()`]: https://nodejs.org/api/util.html#utilinspectobject-options\n[`Deno.inspect()`]: https://docs.deno.com/api/deno/~/Deno.inspect","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.value","deprecated":false,"label":"value"},"TextFormatterOptions.format":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.format","file":".","doc":"How those formatted parts are concatenated.\n\nA function that formats the log record.  This function is called with the\nformatted values and should return a string.  Note that the formatted\n*should not* include a newline character at the end.\n\nBy default, this is a function that formats the log record as follows:\n\n```\n2023-11-14 22:13:20.000 +00:00 [INF] category·subcategory: Hello, world!\n```","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.format","deprecated":false,"label":"TextFormatterOptions.format"},"~TextFormatterOptions.format":{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"TextFormatterOptions.format","file":".","doc":"How those formatted parts are concatenated.\n\nA function that formats the log record.  This function is called with the\nformatted values and should return a string.  Note that the formatted\n*should not* include a newline character at the end.\n\nBy default, this is a function that formats the log record as follows:\n\n```\n2023-11-14 22:13:20.000 +00:00 [INF] category·subcategory: Hello, world!\n```","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/TextFormatterOptions.format","deprecated":false,"label":"format"},"ansiColorFormatter":{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"ansiColorFormatter","file":".","doc":"A text formatter that uses ANSI colors to format log records.\n\n![A preview of ansiColorFormatter.](https://i.imgur.com/I8LlBUf.png)\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/ansiColorFormatter","deprecated":false,"label":"ansiColorFormatter"},"compareLogLevel()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"compareLogLevel","file":".","doc":"Compares two log levels.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/compareLogLevel","deprecated":false,"label":"compareLogLevel()"},"configure()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"configure","file":".","doc":"Configure the loggers with the specified configuration.\n\nNote that if the given sinks or filters are disposable, they will be\ndisposed when the configuration is reset, or when the process exits.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/configure","deprecated":false,"label":"configure()"},"defaultConsoleFormatter()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"defaultConsoleFormatter","file":".","doc":"The default console formatter.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/defaultConsoleFormatter","deprecated":false,"label":"defaultConsoleFormatter()"},"defaultTextFormatter":{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"defaultTextFormatter","file":".","doc":"The default text formatter.  This formatter formats log records as follows:\n\n```\n2023-11-14 22:13:20.000 +00:00 [INF] category·subcategory: Hello, world!\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/defaultTextFormatter","deprecated":false,"label":"defaultTextFormatter"},"dispose()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"dispose","file":".","doc":"Dispose of the disposables.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/dispose","deprecated":false,"label":"dispose()"},"getAnsiColorFormatter()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getAnsiColorFormatter","file":".","doc":"Get an ANSI color formatter with the specified options.\n\n![A preview of an ANSI color formatter.](https://i.imgur.com/I8LlBUf.png)","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/getAnsiColorFormatter","deprecated":false,"label":"getAnsiColorFormatter()"},"getConfig()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getConfig","file":".","doc":"Get the current configuration, if any.  Otherwise, `null`.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/getConfig","deprecated":false,"label":"getConfig()"},"getConsoleSink()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getConsoleSink","file":".","doc":"A console sink factory that returns a sink that logs to the console.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/getConsoleSink","deprecated":false,"label":"getConsoleSink()"},"getFileSink()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getFileSink","file":".","doc":"Get a file sink.\n\nNote that this function is unavailable in the browser.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/getFileSink","deprecated":false,"label":"getFileSink()"},"getLevelFilter()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getLevelFilter","file":".","doc":"Returns a filter that accepts log records with the specified level.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/getLevelFilter","deprecated":false,"label":"getLevelFilter()"},"getLogger()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getLogger","file":".","doc":"Get a logger with the given category.\n\n```typescript\nconst logger = getLogger([\"my-app\"]);\n```\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/getLogger","deprecated":false,"label":"getLogger()"},"getRotatingFileSink()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getRotatingFileSink","file":".","doc":"Get a rotating file sink.\n\nThis sink writes log records to a file, and rotates the file when it reaches\nthe `maxSize`.  The rotated files are named with the original file name\nfollowed by a dot and a number, starting from 1.  The number is incremented\nfor each rotation, and the maximum number of files to keep is `maxFiles`.\n\nNote that this function is unavailable in the browser.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/getRotatingFileSink","deprecated":false,"label":"getRotatingFileSink()"},"getStreamSink()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getStreamSink","file":".","doc":"A factory that returns a sink that writes to a {@link WritableStream}.\n\nNote that the `stream` is of Web Streams API, which is different from\nNode.js streams.  You can convert a Node.js stream to a Web Streams API\nstream using [`stream.Writable.toWeb()`] method.\n\n[`stream.Writable.toWeb()`]: https://nodejs.org/api/stream.html#streamwritabletowebstreamwritable\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/getStreamSink","deprecated":false,"label":"getStreamSink()"},"getTextFormatter()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"getTextFormatter","file":".","doc":"Get a text formatter with the specified options.  Although it's flexible\nenough to create a custom formatter, if you want more control, you can\ncreate a custom formatter that satisfies the {@link TextFormatter} type\ninstead.\n\nFor more information on the options, see {@link TextFormatterOptions}.\n\nBy default, the formatter formats log records as follows:\n\n```\n2023-11-14 22:13:20.000 +00:00 [INF] category·subcategory: Hello, world!\n```","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/getTextFormatter","deprecated":false,"label":"getTextFormatter()"},"isLogLevel()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"isLogLevel","file":".","doc":"Checks if a string is a valid log level.  This function can be used as\nas a type guard to narrow the type of a string to a {@link LogLevel}.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/isLogLevel","deprecated":false,"label":"isLogLevel()"},"parseLogLevel()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"parseLogLevel","file":".","doc":"Parses a log level from a string.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/parseLogLevel","deprecated":false,"label":"parseLogLevel()"},"reset()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"reset","file":".","doc":"Reset the configuration.  Mostly for testing purposes.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/reset","deprecated":false,"label":"reset()"},"toFilter()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"toFilter","file":".","doc":"Converts a {@link FilterLike} value to an actual {@link Filter}.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/toFilter","deprecated":false,"label":"toFilter()"},"withContext()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"withContext","file":".","doc":"Runs a callback with the given implicit context.  Every single log record\nin the callback will have the given context.\n\nIf no `contextLocalStorage` is configured, this function does nothing and\njust returns the return value of the callback.  It also logs a warning to\nthe `[\"logtape\", \"meta\"]` logger in this case.","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/withContext","deprecated":false,"label":"withContext()"},"withFilter()":{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"withFilter","file":".","doc":"Turns a sink into a filtered sink.  The returned sink only logs records that\npass the filter.\n","url":"https://jsr.io/@logtape/logtape@0.8.2/doc/~/withFilter","deprecated":false,"label":"withFilter()"}}}